{"meta":{"title":"zpauly's blog","subtitle":null,"description":null,"author":"zpauly","url":"http://yoursite.com"},"pages":[{"title":"archives","date":"2016-09-30T12:56:12.000Z","updated":"2017-02-06T14:44:51.000Z","comments":true,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"links","date":"2017-02-06T14:56:25.000Z","updated":"2017-02-06T14:56:25.000Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"categories","date":"2016-09-30T12:55:33.000Z","updated":"2017-02-06T14:50:39.000Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-09-30T12:55:54.000Z","updated":"2017-02-06T14:45:17.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2017-02-09T02:20:00.000Z","updated":"2017-02-18T04:50:30.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"张禹 性别：男 年月：1996.07 教育背景：江西师范大学-本科 联系方式：13665204594 现所在地：江西南昌 E-mail：zpauly1996@gmail.com github：https://github.com/zpauly 博客地址：http://zpauly.me/ 技能描述 Java方面：理解面向对象编程思想，熟悉Java泛型的使用，容器类的操作，反射以及注解等，了解JVM的内存管理机制包括垃圾收集器和内存分配策略。 Android方面：熟悉四大组件的使用，熟悉View的绘制过程以及事件分发，熟悉Android的消息处理机制并阅读过实现该机制的三个类(Handler、Looper、MessageQueue)的源码，了解Binder机制并有阅读过其Framework层的源码。 掌握版本控制工具Git的使用，懂得如何解决团队协作中的代码冲突问题。 能够熟练阅读英文文档。 喜爱尝试新技术，并愿意将其运用在项目的实践过程当中。对于不够理解的内容，愿意努力去阅读源码增加自己对其的理解。当出现自己不懂的技术或内容，善于使用Google、StackOverFlow等来解决自己问题，如果还不能懂得如何与同伴交流尝试一起解决问题。 项目经历GitDroid——GitHub的第三方客户端 项目地址：https://github.com/zpauly/GitHub_Android 介绍：一个GitHub的Android第三方客户端，在移动端实现了我们平时在GitHub上会常用到的功能。 职责：全部单独完成。 技术要点: 外观上使用了Material Design风格，使客户端看上去大方美观。 项目构建方面使用了MVP模式，减轻了Activity的压力，减轻了代码之间的耦合性。 灵活运用第三方库来实现所需的效果。 使用ButterKnife来处理View的绑定，使用Glide库来加载所需展示的图片，使用Retrofit库与Gson库来实现与后端的Restful式的通信方式，使用RxJava来最简洁地处理异步操作。 在显示Readme内容方面，使用了ImageGetter实现在一个TextView中便可以展示Readme的效果。 大部分功能都是通过接入GitHub提供的API来实现，但是有API未提供的部分如Trending是通过抓取网页的Html代码并解析来实现的。 JxnoGo——淘二手(目前后端同学暂停维护) 项目地址：https://github.com/zpauly/jxnugo-Android 介绍：淘二手客户端的设计目的是为了方便校内闲置物品交易的一个平台，有web端和移动端。 职责：全部单独完成。 技术要点： 外观上使用了Material Design风格，使客户端看上去大方美观 项目构建方面使用了MVP模式，减轻了Activity的压力，减轻了代码之间的耦合性。 灵活运用第三方库来实现所需的效果。 使用ButterKnife来处理View的绑定，使用Glide库来加载所需展示的图片，使用Retrofit库与Gson库来实现与后端的Restful式的通信方式，使用RxJava来最简洁地处理异步操作。 自定义View解决了需要纵向滑动View中有一个需要横向滑动View的滑动冲突。 师大+——校园资讯客户端 项目地址：https://github.com/MummyDing/Awesome-Campus 介绍：江西师范大学校园资讯客户端。 职责：后期维护及后期新功能包括兼职信息等功能的添加。 技术要点： 由于没有学校提供相关API，所以只能通过模拟登陆的方式抓取学校教务网的信息来展现在移动端上。 其他 连续两年获得校年度综合素质奖学金 大二上学期获得江西省服务外包创新创业挑战赛二等奖 大二下学期获得江西省计算机作品大赛一等奖 自我评价 有良好的学习能力，做事积极主动。 有良好的团队意识，可以配合组内同事开发产品。 具备良好的分析解决问题能力，能不断学习，提升自己。 遇到技术难题肯花时间解决。能吃苦，能担起重任。 性格友善，易于相处。"}],"posts":[{"title":"NDK开发学习（二）：JNI规则","slug":"NDK开发学习（二）：JNI规则","date":"2017-02-16T04:20:00.000Z","updated":"2017-02-21T06:26:34.000Z","comments":true,"path":"2017/02/16/NDK开发学习（二）：JNI规则/","link":"","permalink":"http://yoursite.com/2017/02/16/NDK开发学习（二）：JNI规则/","excerpt":"","text":"JVM查找native方法JVM 查找 native 方法有两种方式： 按照 JNI 规范的命名规则 调用 JNI 提供的 RegisterNatives 函数，将本地函数注册到 JVM 中。 在编译我们所写的c/c++代码成动态库的时候，有两个头文件是需要的1234567891011121314151617181920&gt; jni_md.h```c++#ifndef _JAVASOFT_JNI_MD_H_#define _JAVASOFT_JNI_MD_H_#define JNIEXPORT __attribute__((visibility(&quot;default&quot;)))#define JNIIMPORT __attribute__((visibility(&quot;default&quot;)))#define JNICALLtypedef int jint;#ifdef _LP64 /* 64-bit */typedef long jlong;#elsetypedef long long jlong;#endiftypedef signed char jbyte;#endif /* !_JAVASOFT_JNI_MD_H_ */ 当然，可以看到在mac平台下JNIEXPORT、JNIIMPORT、JNICALL并没有定义具体内容，是个空定义。 至于函数的命名规则，在NDK开发学习（一）：尝试JNI中有提到。 JNI数据类型首先是一个非常特殊的类型——JNIEnv*。它是定义任意 native 函数的第一个参数，指向 JVM 函数表的指针，函数表中的每一个入口指向一个 JNI 函数，每个函数用于访问 JVM 中特定的数据结构。 其余的下面两张图可以概括 值得注意的是JNI中所与Java中的基本数据类型对应的类型的值是可以在程序中直接使用到的，但是引用数据类型则不行。这是由于与基本类型不同，引用类型所传入的是一个指针类型，指向那个对象在JVM内存中的地址。要想从JVM内存中访问到这些数据，就需要通过JNIEnv*来实现。 #####","categories":[{"name":"NDK开发学习","slug":"NDK开发学习","permalink":"http://yoursite.com/categories/NDK开发学习/"}],"tags":[{"name":"JNI","slug":"JNI","permalink":"http://yoursite.com/tags/JNI/"}],"keywords":[{"name":"NDK开发学习","slug":"NDK开发学习","permalink":"http://yoursite.com/categories/NDK开发学习/"}]},{"title":"NDK开发学习（一）：尝试JNI","slug":"NDK开发学习（一）：尝试JNI","date":"2017-02-15T03:12:30.000Z","updated":"2017-02-21T06:26:27.000Z","comments":true,"path":"2017/02/15/NDK开发学习（一）：尝试JNI/","link":"","permalink":"http://yoursite.com/2017/02/15/NDK开发学习（一）：尝试JNI/","excerpt":"","text":"注：此过程在mac环境下 JNI开发流程简介 编写声明了 native 方法的 Java 类 将 Java 源代码编译成 class 字节码文件 用 javah -jni 命令生成.h头文件（javah 是 jdk 自带的一个命令，-jni 参数表示将 class 中用native 声明的函数生成 JNI 规则的函数） 用本地代码实现.h头文件中的函数 将本地代码编译成动态库（Windows：*.dll，linux/unix：*.so，mac os x：*.jnilib） 拷贝动态库至 java.library.path 本地库搜索目录下，并运行 Java 程序 尝试JNI一.定义一个native 函数 HelloWorld.java 123456789101112public class HelloWorld &#123; static &#123; //所需加载的动态库的完整路径 System.load(\"/Users/zhangyu/Desktop/JavaProjects/LearnJNI/jni/libHelloWorld.jnilib\"); &#125; public static native String sayHello(String name); public static void main(String... args) &#123; String text = sayHello(\"zpauly\"); System.out.println(text); &#125;&#125; 二.使用将.java文件编译为.class文件1javac src/HelloWorld.java -d bin 这里我使用-d命令将class文件生成到指定目录下 三.根据.class文件生成.h头文件1javah -jni -classpath bin -d jni HelloWorld 默认生成的头文件的名称为：包名+类名.h，如：若此处HelloWorld的包名为123456789101112131415161718192021222324252627282930313233javah -jni命令参数- classpath：类搜索路径，这里表示从当前的 bin 目录下查找- d：将生成的头文件放到当前的 jni 目录下- o： 指定生成的头文件名称，默认以类全路径名生成（包名+类名.h）此时生成的头文件为&gt; HelloWorld.h```c++/* DO NOT EDIT THIS FILE - it is machine generated */#include &lt;jni.h&gt;/* Header for class HelloWorld */#ifndef _Included_HelloWorld#define _Included_HelloWorld#ifdef __cplusplusextern &quot;C&quot; &#123;#endif/* * Class: HelloWorld * Method: sayHello * Signature: (Ljava/lang/String;)Ljava/lang/String; */JNIEXPORT jstring JNICALL Java_HelloWorld_sayHello (JNIEnv *, jclass, jstring);#ifdef __cplusplus&#125;#endif#endif 四.实现头文件中的函数 HelloWorld.c 12345678910111213141516171819202122232425262728#include \"HelloWorld.h\"#ifdef __cplusplusextern \"C\" &#123;#endif/* * Class: HelloWorld * Method: sayHello * Signature: (Ljava/lang/String;)Ljava/lang/String; */JNIEXPORT jstring JNICALL Java_HelloWorld_sayHello(JNIEnv *env, jclass clazz, jstring j_str) &#123; const char *c_str = NULL; char buff[128] = &#123; 0 &#125;; c_str = (*env)-&gt;GetStringUTFChars(env, j_str, NULL); if (c_str == NULL) &#123; printf(\"out of memory.\\n\"); return NULL; &#125; (*env)-&gt;ReleaseStringUTFChars(env, j_str, c_str); printf(\"Java String:%s\\n\", c_str); sprintf(buff, \"hello %s\\n\", c_str); return (*env)-&gt;NewStringUTF(env, buff);&#125;#ifdef __cplusplus&#125;#endif 五.将写好的c/c++代码编译为本地动态库动态库命名规则：lib+动态库文件名+后缀 1gcc -dynamiclib -o jni/libHelloWorld.jnilib jni/HelloWorld.c -framework JavaVM -I/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/include/darwin 参数说明： -dynamiclib：表示编译成动态链接库 -o：指定动态链接库编译后生成的路径及文件名 -framework JavaVM -I：编译 JNI 需要用到 JVM 的头文件(jni.h)，第一个目录是平台无关的，第二个目录是与操作系统平台相关的头文件 六.运行Java程序运行效果","categories":[{"name":"NDK开发学习","slug":"NDK开发学习","permalink":"http://yoursite.com/categories/NDK开发学习/"}],"tags":[{"name":"JNI","slug":"JNI","permalink":"http://yoursite.com/tags/JNI/"}],"keywords":[{"name":"NDK开发学习","slug":"NDK开发学习","permalink":"http://yoursite.com/categories/NDK开发学习/"}]},{"title":"了解Annotation-Processing-Tool","slug":"了解Annotation-Processing-Tool","date":"2017-01-21T06:29:08.000Z","updated":"2017-02-21T06:45:42.000Z","comments":true,"path":"2017/01/21/了解Annotation-Processing-Tool/","link":"","permalink":"http://yoursite.com/2017/01/21/了解Annotation-Processing-Tool/","excerpt":"","text":"我知道APT（Annotation-Processing-Tool）还得从很有名的一个Android开源库ButterKnife说起。起初我对其并不在意，以为它内部的实现只是简单的反射，但是某一次当我看到一篇文章內这么说： ButterKnife实现了编译期注入，效率远高于采用反射机制 于是便对这个编译期注入起了兴趣，通过一番学习总算是了解了APT这么个神奇的东西。 注：主要学习资料为官方文档 一些基本概念注解处理器是 javac 自带的一个工具，用来在编译时期扫描处理注解信息。你可以为某些注解注册自己的注解处理器。 一个特定注解的处理器以 java 源代码（或者已编译的字节码）作为输入，然后生成一些文件（通常是.java文件）作为输出。那意味着什么呢？你可以生成 java 代码！这些 java 代码在生成的.java文件中。因此你不能改变已经存在的java类，例如添加一个方法。这些生成的 java 文件跟其他手动编写的 java 源代码一样，将会被 javac 编译。 AbstractProcessor让我们来看一下处理器的 API。所有的处理器都继承了AbstractProcessor，如下所示： 1234567891011121314151617181920212223242526272829303132333435363738package com.example;import java.util.LinkedHashSet;import java.util.Set;import javax.annotation.processing.AbstractProcessor;import javax.annotation.processing.ProcessingEnvironment;import javax.annotation.processing.RoundEnvironment;import javax.annotation.processing.SupportedAnnotationTypes;import javax.annotation.processing.SupportedSourceVersion;import javax.lang.model.SourceVersion;import javax.lang.model.element.TypeElement;public class MyProcessor extends AbstractProcessor &#123; @Override public boolean process(Set&lt;? extends TypeElement&gt; annoations, RoundEnvironment env) &#123; return false; &#125; @Override public Set&lt;String&gt; getSupportedAnnotationTypes() &#123; Set&lt;String&gt; annotataions = new LinkedHashSet&lt;String&gt;(); annotataions.add(\"com.example.MyAnnotation\"); return annotataions; &#125; @Override public SourceVersion getSupportedSourceVersion() &#123; return SourceVersion.latestSupported(); &#125; @Override public synchronized void init(ProcessingEnvironment processingEnv) &#123; super.init(processingEnv); &#125;&#125; init(ProcessingEnvironment processingEnv) ：所有的注解处理器类都必须有一个无参构造函数。然而，有一个特殊的方法init()，它会被注解处理工具调用，以ProcessingEnvironment作为参数。ProcessingEnvironment 提供了一些实用的工具类Elements, Types和Filer。我们在后面将会使用到它们。 process(Set annoations, RoundEnvironment env) ：这类似于每个处理器的main()方法。你可以在这个方法里面编码实现扫描，处理注解，生成 java 文件。使用RoundEnvironment 参数，你可以查询被特定注解标注的元素（原文：you can query for elements annotated with a certain annotation ）。后面我们将会看到详细内容。 getSupportedAnnotationTypes()：在这个方法里面你必须指定哪些注解应该被注解处理器注册。注意，它的返回值是一个String集合，包含了你的注解处理器想要处理的注解类型的全称。换句话说，你在这里定义你的注解处理器要处理哪些注解。 getSupportedSourceVersion() ： 用来指定你使用的 java 版本。通常你应该返回SourceVersion.latestSupported() 。不过，如果你有足够的理由坚持用 java 6 的话，你也可以返回SourceVersion.RELEASE_6。我建议使用SourceVersion.latestSupported()。在 Java 7 中，你也可以使用注解的方式来替代重写getSupportedAnnotationTypes()和 getSupportedSourceVersion()，如下所示： 123456789101112131415161718@SupportedSourceVersion(value=SourceVersion.RELEASE_7)@SupportedAnnotationTypes(&#123; // Set of full qullified annotation type names \"com.example.MyAnnotation\", \"com.example.AnotherAnnotation\" &#125;)public class MyProcessor extends AbstractProcessor &#123; @Override public boolean process(Set&lt;? extends TypeElement&gt; annoations, RoundEnvironment env) &#123; return false; &#125; @Override public synchronized void init(ProcessingEnvironment processingEnv) &#123; super.init(processingEnv); &#125;&#125; 由于兼容性问题，特别是对于 android ，建议重写getSupportedAnnotationTypes() 和 getSupportedSourceVersion() ，而不是使用 @SupportedAnnotationTypes 和 @SupportedSourceVersion。 注册处理器在你的 .jar 文件中，你必须打包一个特殊的文件javax.annotation.processing.Processor到META-INF/services目录下。因此你的 .jar 文件目录结构看起来就你这样： 1234567MyProcess.jar -com -example -MyProcess.class -META-INF -services -javax.annotation.processing.Processor javax.annotation.processing.Processor 文件的内容是一个列表，每一行是一个注解处理器的全称。例如： 12com.example.MyProcesscom.example.AnotherProcess 亲身实践这里我就不多加介绍了，我模仿ButterKnife写了一个小例子，感兴趣可以看看。","categories":[],"tags":[{"name":"Annotation-Processing-Tool","slug":"Annotation-Processing-Tool","permalink":"http://yoursite.com/tags/Annotation-Processing-Tool/"},{"name":"注解","slug":"注解","permalink":"http://yoursite.com/tags/注解/"}],"keywords":[]},{"title":"Android插件化入门资料","slug":"Android插件化入门资料","date":"2016-12-25T13:33:10.000Z","updated":"2017-02-07T09:42:36.000Z","comments":true,"path":"2016/12/25/Android插件化入门资料/","link":"","permalink":"http://yoursite.com/2016/12/25/Android插件化入门资料/","excerpt":"","text":"最近一直在学习Android Framework层的源码，而插件化自当是我想到的关于这方面的最好实践。但毕竟插件化的难度还是很大的，因此在插件化的入门过程中，自己总是会绕得云里雾里。不过幸运的是我发现了一个系列的文章，可以说是大大提高了我这方面的学习效率。 Hook机制之动态代理 Hook机制之Binder Hook Hook机制之AMS&amp;PMS Activity生命周期管理 插件加载机制 广播的管理 Service的插件化 ContentProvider的插件化 在这里做个分享，顺便自己也收藏一下，以后要是有什么记不得的也常来看看(ง •̀_•́)ง","categories":[{"name":"Android插件化","slug":"Android插件化","permalink":"http://yoursite.com/categories/Android插件化/"}],"tags":[{"name":"插件化","slug":"插件化","permalink":"http://yoursite.com/tags/插件化/"},{"name":"Android Framework","slug":"Android-Framework","permalink":"http://yoursite.com/tags/Android-Framework/"}],"keywords":[{"name":"Android插件化","slug":"Android插件化","permalink":"http://yoursite.com/categories/Android插件化/"}]},{"title":"带你看Glide源码","slug":"带你看Glide源码","date":"2016-12-21T06:22:16.000Z","updated":"2017-02-21T06:25:52.000Z","comments":true,"path":"2016/12/21/带你看Glide源码/","link":"","permalink":"http://yoursite.com/2016/12/21/带你看Glide源码/","excerpt":"","text":"随着Android开发的愈渐火热，各种Android的图片加载库也曾出不穷，比较有名的有：Fresco、Picasso、Universal Image Loader等等。在这篇文章中，我会通过源码来简单地分析一下Glide使用时所发生的事情。 ###使用方法对于Glide的使用方法不是本文的重点，在这里就不多说了，这里贴出Glide的Github地址，如果对使用方法有什么疑问的就上官方去看看吧。这里我们从Glide最简单的三行使用方法入手进行分析：123Glide.with(...) .load(...) .into(...); ###流程分析首先我们进入Glide类看看with()方法：1234public static RequestManager with(Context context) &#123; RequestManagerRetriever retriever = RequestManagerRetriever.get(); return retriever.get(context);&#125; 我们可以看到with()方法是Glide类中的一个静态方法，它会创建一个RequestManagerRetriever对象，在这里我们先不看这个类在创建过程中发生的事情，先看看它通过传入的Context对象所返回的这个RequestManager对象。 对于RequestManager这个类，官方文档是这样描述的：A class for managing and starting requests for Glide. Can use activity, fragment and connectivity lifecycle events to intelligently stop, start, and restart requests. Retrieve either by instantiating a new object, or to take advantage built in Activity and Fragment lifecycle handling, use the static Glide.load methods with your Fragment or Activity.本人英文一般，就不逐字逐句地翻译了。总之，对于RequestManager这个类的定位就是对图片加载请求进行管理的类，并且它会根据与其产生联系的Context对象的生命周期来管理图片加载的过程。因此，图片资源加载进ImageView的过程事实上是由它来一手掌管的。 知道了这些，我们接下来来看看它的load()方法，也就是我们将资源路径传入的这个方法，这里我们以传入一个Uri为例：123public DrawableTypeRequest&lt;Uri&gt; load(Uri uri) &#123; return (DrawableTypeRequest&lt;Uri&gt;) fromUri().load(uri);&#125; 在这个方法中使用了DrawableTypeRequest中的load()方法去加载这个uri：1234public DrawableRequestBuilder&lt;ModelType&gt; load(ModelType model) &#123; super.load(model); return this;&#125; 这个方法的泛型参数ModelType在这里所对应的实际类型就是我们传入的资源类型Uri，并且调用了DrawableRequestBuilder的父类方法load()来处理。 GenericRequestBuilder就是DrawableRequestBuilder的父类，这个类及其子类的作用就是用于请求加载的。我们来看看里面刚刚提到的load()方法：12345public GenericRequestBuilder&lt;ModelType, DataType, ResourceType, TranscodeType&gt; load(ModelType model) &#123; this.model = model; isModelSet = true; return this;&#125; 这里我们发现，load()方法仅仅是将资源——这里就是我们的图片资源Uri赋值给了一个变量model，至于图片资源究竟是怎么加载进ImageView的，我们回到这里实际进行加载请求的类DrawableRequestBuilder去看看它当中被我们最后调用的into()方法：123public Target&lt;GlideDrawable&gt; into(ImageView view) &#123; return super.into(view);&#125; 和load()方法相同，这里也调用了父类GenericRequestBuilder的into()方法：1234public Target&lt;TranscodeType&gt; into(ImageView view) &#123; ...... return into(glide.buildImageViewTarget(view, transcodeClass));&#125; 对于这个方法我们只看最后一句代码。在这里又再次回到一开始的Glide，并调用了其中的buildImageViewTarget()方法，而在这个方法中传入了一个GlideDrawable对象transcodedClass：123&lt;R&gt; Target&lt;R&gt; buildImageViewTarget(ImageView imageView, Class&lt;R&gt; transcodedClass) &#123; return imageViewTargetFactory.buildTarget(imageView, transcodedClass);&#125; 我们继续跟踪下去：1234567891011public &lt;Z&gt; Target&lt;Z&gt; buildTarget(ImageView view, Class&lt;Z&gt; clazz) &#123; if (GlideDrawable.class.isAssignableFrom(clazz)) &#123; return (Target&lt;Z&gt;) new GlideDrawableImageViewTarget(view); &#125; else if (Bitmap.class.equals(clazz)) &#123; return (Target&lt;Z&gt;) new BitmapImageViewTarget(view); &#125; else if (Drawable.class.isAssignableFrom(clazz)) &#123; return (Target&lt;Z&gt;) new DrawableImageViewTarget(view); &#125; else &#123; throw new IllegalArgumentException(\"Unhandled class: \" + clazz + \", try .as*(Class).transcode(ResourceTranscoder)\"); &#125;&#125; 经过反复地辗转我们终于发现了上面我们传入into()方法中的是一个和我们所要将图片加载进的ImageView相关的GlideDrawableImageViewTarget对象。我们先记住这一点，不继续深究下去，先回头看看那个GenericRequestBuilder中的into()方法：123456789public &lt;Y extends Target&lt;TranscodeType&gt;&gt; Y into(Y target) &#123; ...... Request request = buildRequest(target); target.setRequest(request); ...... requestTracker.runRequest(request); return target;&#125; 这段代码所做的事情根据方法名很容易就能猜到，它先根据传入的一个Target对象创建一个Request，并将两者建立关联，最后执行加载请求。 这里我们反过来会发现，这个Target的实际对象就是我们刚刚所说的那个GlideDrawable，另外谈到请求，是不是想到我们前面load()进去的那个Uri对象了呢？一阵云里雾里，整个内容终于联系了起来，那么我们就先来看看这个Request对象究竟是怎么创建的：1234private Request buildRequest(Target&lt;TranscodeType&gt; target) &#123; ...... return buildRequestRecursive(target, null);&#125; 这里又将那个Target对象传进一个buildRequestRecursive()方法中：1234private Request buildRequestRecursive(Target&lt;TranscodeType&gt; target, ThumbnailRequestCoordinator parentCoordinator) &#123; ...... return obtainRequest(target, sizeMultiplier, priority, parentCoordinator);&#125; 对于这个方法，我们重点来关注一下其中的一行代码，其中涉及了obtainRequest()方法，这个方法有四个参数，其中最重要的就是第一个，这里将刚刚的Target对象给传了进去，我们接下来看一下这个方法：12345678910111213141516171819202122232425262728private Request obtainRequest(Target&lt;TranscodeType&gt; target, float sizeMultiplier, Priority priority, RequestCoordinator requestCoordinator) &#123; return GenericRequest.obtain( loadProvider, model, signature, context, priority, target, sizeMultiplier, placeholderDrawable, placeholderId, errorPlaceholder, errorId, fallbackDrawable, fallbackResource, requestListener, requestCoordinator, glide.getEngine(), transformation, transcodeClass, isCacheable, animationFactory, overrideWidth, overrideHeight, diskCacheStrategy);&#125; 这个方法中只做了一件事，调用了GenericRequest类的静态方法obtain()，并且传入了很多的参数，这里注意其中的参数target，即上面的GlideDrawableImageViewTarget对象，另外还有就是这里执行了Glide中的getEngine()方法，还有资源模型model。然后继续往下看：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public static &lt;A, T, Z, R&gt; GenericRequest&lt;A, T, Z, R&gt; obtain( LoadProvider&lt;A, T, Z, R&gt; loadProvider, A model, Key signature, Context context, Priority priority, Target&lt;R&gt; target, float sizeMultiplier, Drawable placeholderDrawable, int placeholderResourceId, Drawable errorDrawable, int errorResourceId, Drawable fallbackDrawable, int fallbackResourceId, RequestListener&lt;? super A, R&gt; requestListener, RequestCoordinator requestCoordinator, Engine engine, Transformation&lt;Z&gt; transformation, Class&lt;R&gt; transcodeClass, boolean isMemoryCacheable, GlideAnimationFactory&lt;R&gt; animationFactory, int overrideWidth, int overrideHeight, DiskCacheStrategy diskCacheStrategy) &#123; @SuppressWarnings(\"unchecked\") GenericRequest&lt;A, T, Z, R&gt; request = (GenericRequest&lt;A, T, Z, R&gt;) REQUEST_POOL.poll(); if (request == null) &#123; request = new GenericRequest&lt;A, T, Z, R&gt;(); &#125; request.init(loadProvider, model, signature, context, priority, target, sizeMultiplier, placeholderDrawable, placeholderResourceId, errorDrawable, errorResourceId, fallbackDrawable, fallbackResourceId, requestListener, requestCoordinator, engine, transformation, transcodeClass, isMemoryCacheable, animationFactory, overrideWidth, overrideHeight, diskCacheStrategy); return request;&#125; 这一段看上去有点长，但是其实也只涉及到了一个方法init()，这个方法同样接受了很多参数，并且在这个方法中，做的也只有一件事，就是将这些传入的参数一一赋值给GenericRequest的成员变量：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950private void init( LoadProvider&lt;A, T, Z, R&gt; loadProvider, A model, Key signature, Context context, Priority priority, Target&lt;R&gt; target, float sizeMultiplier, Drawable placeholderDrawable, int placeholderResourceId, Drawable errorDrawable, int errorResourceId, Drawable fallbackDrawable, int fallbackResourceId, RequestListener&lt;? super A, R&gt; requestListener, RequestCoordinator requestCoordinator, Engine engine, Transformation&lt;Z&gt; transformation, Class&lt;R&gt; transcodeClass, boolean isMemoryCacheable, GlideAnimationFactory&lt;R&gt; animationFactory, int overrideWidth, int overrideHeight, DiskCacheStrategy diskCacheStrategy) &#123; this.loadProvider = loadProvider; this.model = model; this.signature = signature; this.fallbackDrawable = fallbackDrawable; this.fallbackResourceId = fallbackResourceId; this.context = context.getApplicationContext(); this.priority = priority; this.target = target; this.sizeMultiplier = sizeMultiplier; this.placeholderDrawable = placeholderDrawable; this.placeholderResourceId = placeholderResourceId; this.errorDrawable = errorDrawable; this.errorResourceId = errorResourceId; this.requestListener = requestListener; this.requestCoordinator = requestCoordinator; this.engine = engine; this.transformation = transformation; this.transcodeClass = transcodeClass; this.isMemoryCacheable = isMemoryCacheable; this.animationFactory = animationFactory; this.overrideWidth = overrideWidth; this.overrideHeight = overrideHeight; this.diskCacheStrategy = diskCacheStrategy; status = Status.PENDING; ......&#125; 到这里对于加载请求的设置几本完成，我们再回去看看那句运行加载的代码requestTracker.runRequest(request);所做的具体的事情：12345678public void runRequest(Request request) &#123; ...... if (!isPaused) &#123; request.begin(); &#125; else &#123; ...... &#125;&#125; 这里调用了刚刚设置好的Request对象的begin()方法，而这里的Request对象的实际类型就是上面我们所看到的GenericRequest对象。于是，我们来看看它的begin()方法：1234567public void begin() &#123; ...... if (!isComplete() &amp;&amp; !isFailed() &amp;&amp; canNotifyStatusChanged()) &#123; target.onLoadStarted(getPlaceholderDrawable()); &#125; ......&#125; 这里我们需要关注的就是一个Target对象的onLoadStarted()方法，在这里我们记起这个Target对象的实际类型就是上面的init()方法中所设置的GlideDrawableImageViewTarget对象。也许你会认为这个begin()方法就是资源加载进ImageView的关键，但是当我们点进去查看它的begin()方法时却发现并不如我们所想，它只是为我们的ImageView设置了一个占位图，并没有做其他的事情。但是我们在查看GlideDrawableImageViewTarget的源码的时候，我们发现了这么一个方法onResourceReady()，在这个方法中有这么一句代码：1setResource(resource); 接着看看setResource()：123public void setResource(GlideDrawable resource) &#123; view.setImageDrawable(resource);&#125; 这里的resource我们猜应该就是图片资源了，也会是说这里所做的事情就是最后将图片呈现在ImageView上，但程序究竟是怎么到这里的呢，我们想到了上面的getEngine()方法，于是我们来看看这里所做的事情：123Engine getEngine() &#123; return engine;&#125; 这个Engine又是一个非常重要的类，我们来看看这个类的官方介绍：Responsible for starting loads and managing active and cached resources.我们发现这个类就是真正用来管理加载的类。但是这个不是我这篇文章的重点，关于它所作的事情我会在后面的文章中对它进行简析。既然这个Engine对象是用来加载资源的，那么我们就想到了一开始的那个上面另外一个要记住的model，看看它们是怎么运用的。要想知道这到底是怎么使用的，我在这里贴出最重要的一段：123private void onLoadComplete(Resource resource) &#123; manager.onResourceReady(resource);&#125; 这个方法是EngineRunnable类中的，这个类从名字就可以看出来它的作用就是响应Engine的。而这里的onResourceReady()则是触发了GenericRequest中的一个回调onResourceReady()：1234public void onResourceReady(Resource&lt;?&gt; resource) &#123; ...... onResourceReady(resource, (R) received);&#125; 这里又调用了该类中的一个重载方法：123456789private void onResourceReady(Resource&lt;?&gt; resource, R result) &#123; ...... if (requestListener == null || !requestListener.onResourceReady(result, model, target, loadedFromMemoryCache, isFirstResource)) &#123; ...... &#125; notifyLoadSuccess(); ......&#125; 这里我们看到了，这个方法使用到了model，而这个方法则属于一个RequestListener回调接口，这个回调接口究竟会在哪里被调用呢，其实就是我们上面提到的GlideDrawableImageViewTarget的onResourceReady()，而在这个方法中，另一个参数target在这里的实际类型就是GlideDrawableImageViewTarget。到这里我们终于是弄明白整个图片资源的加载过程了。 至此Glide加载图片的调用链大致是搞明白了，里面涉及了大量的设计模式，因此十分复杂，但是原理很简单易懂，理清楚之后便十分清晰明了。","categories":[{"name":"拆轮子系列","slug":"拆轮子系列","permalink":"http://yoursite.com/categories/拆轮子系列/"}],"tags":[{"name":"源码","slug":"源码","permalink":"http://yoursite.com/tags/源码/"},{"name":"Glide","slug":"Glide","permalink":"http://yoursite.com/tags/Glide/"}],"keywords":[{"name":"拆轮子系列","slug":"拆轮子系列","permalink":"http://yoursite.com/categories/拆轮子系列/"}]},{"title":"Picasso源码学习（二）","slug":"Picasso源码学习（二）","date":"2016-10-18T16:00:00.000Z","updated":"2017-02-06T15:17:37.000Z","comments":true,"path":"2016/10/19/Picasso源码学习（二）/","link":"","permalink":"http://yoursite.com/2016/10/19/Picasso源码学习（二）/","excerpt":"","text":"继上一篇文章简单分析了一下Picasso的图片加载流程，这次就接着小小地研究一把图片加载中最为重要的一个部分——缓存机制。当然，这段源码阅读过程自然是以上一篇文章中Picasso请求加载流程为基础的。 源码阅读从上一篇的内容来看，在图片加载的过程中调用了一个方法。 1Picasso.quickMemoryCacheCheck(target, requestKey); 这个方法从名字里也可以看出来它的作用是从内存中检查所需的Bitmap资源是否已经存在，如果存在则从缓存中取出来，所以我们首先来看看这个方法干了什么。 123456789101112Bitmap quickMemoryCacheCheck(Object target, String key) &#123; //通过键key作为索引来从缓存中查找Bitmap对象，如果没有则返回null Bitmap cached = cache.get(key); cancelExistingRequest(target, key); if (cached != null) &#123; stats.cacheHit(); &#125; return cached; &#125; 这里关心的主要是cache.get()的调用，这里的cache是一个Cache对象，Cache是一个被设计来专门用于缓存的接口，不是很复杂，在看看cache的具体类型之前，先来看看这个接口。 1234567891011121314151617181920212223242526272829303132public interface Cache &#123; //根据特定的键来从缓存中获取图片资源，如果缓存中没有则返回null Bitmap get(String key); //将一个String对象和一个Bitmap对象以键值对的形式存入缓存中 void set(String key, Bitmap bitmap); //返回当前缓存中的内容大小 int size(); //返回缓存所能存放的最大数据量 int maxSize(); //一个空缓存对象，表示没有存储任何内容 Cache NONE = new Cache() &#123; @Override public Bitmap get(String key) &#123; return null; &#125; @Override public void set(String key, Bitmap bitmap) &#123; // Ignore. &#125; @Override public int size() &#123; return 0; &#125; @Override public int maxSize() &#123; return 0; &#125; &#125;;&#125; 对于每一个方法这里都注释了，也极易明白。再回过头来看看cache的创建过程来看看它的具体类型。 123memoryCache = new LruCache(context);new Picasso(context, loader, service, memoryCache, stats); 这里的memoryCache的类型便是Cache类型，而这个创建的代码就在是在Picasso.Builder的构造函数中，最后被传入Picasso的构造函数，赋值给cache。从这里可以看出来它的具体类型是LruCache。从名字中不难猜出，它实际上是通过使用LRU算法实现的缓存存取过程的。这里的LruCache并不是我们熟知的Android中support-v4包中的类LruCache，但其实现原理都是一摸一样的，都是采用LRU算法将所需缓存的数据存进一个LinkedHashMap中。 上面所提到的便是Picasso的内存缓存机制，那么它的磁盘缓存是通过什么方法实现的呢。其实Picasso的磁盘缓存是通过OkHttp的缓存功能来实现的。这里我们回到Loader类中的createDefaultLoader方法。 12345678static Loader createDefaultLoader(Context context) &#123; try &#123; Class.forName(\"com.squareup.okhttp.OkHttpClient\"); return OkHttpLoaderCreator.create(context); &#125; catch (ClassNotFoundException e) &#123; return new UrlConnectionLoader(context); &#125; &#125; 这个方法的执行过程便是在发现内存缓存中没有所想要的内容时开始通过网络发起请求的时候所发生的。这里先前介绍过实际请求调用的便是其中OkHttpLoader中的loader()方法。 1234567891011@Override public Response load(String url, boolean localCacheOnly) throws IOException &#123; HttpURLConnection connection = client.open(new URL(url)); connection.setUseCaches(true); if (localCacheOnly) &#123; connection.setRequestProperty(\"Cache-Control\", \"only-if-cached\"); &#125; boolean fromCache = parseResponseSourceHeader(connection.getHeaderField(RESPONSE_SOURCE)); return new Response(connection.getInputStream(), fromCache); &#125; 从这里我们便可以一眼看出来，在发起请求的时候，所设置的属性便是对请求内容进行缓存，也就是说如果OkHttp的缓存中已经有了所需的图片资源，那就直接获取，如果没有则继续请求。 通过我们的分析算是证实了Picasso的磁盘缓存机制是通过OkHttp来实现的。但是，Square公司早已推了OkHttp3，但即使是checkout到最新版本的Picasso也并没有从中发现OkHttp3到影子，这就带来一个问题，实际使用Picasso到时候就会由于出现没有使用OkHttp的情况而出现无法使用磁盘缓存的问题。这里便向想要结局这个问题的同学推荐一个库picasso2-okhttp3-downloader，这时Jake大神为这个问题所专门写的，其中的实现机制其实很简单，和Picasso内的OkHttpLoader如出一辙，一看便知。 最后这部分的不长，主要就是我自己查看Picasso缓存机制的一个简单的流程记录，内容也很简单，同时又不可或缺所以就单独拿出来了，还是恨通俗易懂的。","categories":[{"name":"拆轮子系列","slug":"拆轮子系列","permalink":"http://yoursite.com/categories/拆轮子系列/"}],"tags":[{"name":"Picasso","slug":"Picasso","permalink":"http://yoursite.com/tags/Picasso/"},{"name":"源码","slug":"源码","permalink":"http://yoursite.com/tags/源码/"}],"keywords":[{"name":"拆轮子系列","slug":"拆轮子系列","permalink":"http://yoursite.com/categories/拆轮子系列/"}]},{"title":"Picasso源码学习（一）","slug":"Picasso源码学习（一）","date":"2016-10-18T12:53:34.000Z","updated":"2017-02-06T15:17:47.000Z","comments":true,"path":"2016/10/18/Picasso源码学习（一）/","link":"","permalink":"http://yoursite.com/2016/10/18/Picasso源码学习（一）/","excerpt":"","text":"从这里开始我会开始阅读一款来自于Square的大名鼎鼎的图片处理库Picasso，将这个过程以博客的形式记录下来，一方面是一种学习记录，另一方面也是一种督促啦。 准备一切的第一步当然是首先把源码从github上clone下来。 1git clone https://github.com/square/picasso.git 稍等片刻，Picasso的源码就被clone到了自己的电脑上。 当然，现在我们这里的就是Picasso的作者所commit的最新的代码，但是所要看的并不是这个内容，这里需要选择一个release版本。 之所以选的是最早的1.0.0版本，是因为作为最早的版本，后面的所有版本都是基于这个版本进行编写的，阅读最早的版本可以更好地了解整个项目的构架。另外，作为最早的版本，这个版本肯定也是所有版本里最容易阅读的。我们接着将项目checkout到该版本。 1git checkout dea2e24 接下来就是酥爽的源码阅读之旅了。 源码阅读大致了解根据Picasso的使用方法，首先我们会使用 Picasso.with(context)，因此我们就从这里开始看看在我们使用Picasso的时候它都做了些什么。 1234567public static Picasso with(Context context) &#123; if (singleton == null) &#123; //构造Picasso对象 singleton = new Builder(context).build(); &#125; return singleton; &#125; 这是一个Picasso中的静态方法，很明显是构造了一个Picasso的单例，并且在代码构架中使用了Build模式建立了这个对象。这里的关键是Builder对象的构造过程里都做了什么。 12345678910111213141516171819public Picasso build() &#123; Context context = this.context; //创建用于加载图片的对象loader if (loader == null) &#123; loader = Utils.createDefaultLoader(context); &#125; //创建用于缓存的对象memoryCache if (memoryCache == null) &#123; memoryCache = new LruCache(context); &#125; //创建用于请求的服务对象service if (service == null) &#123; service = Executors.newFixedThreadPool(3, new Utils.PicassoThreadFactory()); &#125; //缓存状态对象stats Stats stats = new Stats(memoryCache); return new Picasso(context, loader, service, memoryCache, stats); &#125; 从几个属性的名字里可以看出来，Picasso对象中有几个很重要的属性loader、memory、service和stats。其他先放一边，首先从这个loader对象入手，来分析整个加载流程。 加载流程创建完了Picasso对象之后一般我们一定会调用的代码会是这样的 123Picasso.with(context) .load(url) .into(imageview); 我们可以推测到代码中的后两行做的事情就是将获取资源，然后将其加载进ImageView中。 1234public RequestBuilder load(String path) &#123; //···省略代码··· return new RequestBuilder(this, path, Type.STREAM); &#125; load()方法实际上所做的也就是创建一个RequestBuilder对象，并返回这个对象，into()方法也是这个类里的。 123456789101112131415161718192021222324252627282930RequestBuilder(Picasso picasso, String path, Request.Type type) &#123; this.picasso = picasso; this.path = path; this.resourceId = 0; this.type = type; &#125;public void into(ImageView target) &#123; //创建图片缓存索引key String requestKey = createKey(path, resourceId, options, transformations); //根据key从缓存中查询Bitmap对象 Bitmap bitmap = picasso.quickMemoryCacheCheck(target, requestKey); if (bitmap != null) &#123; //如果存在已经存在于缓存中的Bitmap对象，则加载进ImageView中 PicassoDrawable.setBitmap(target, picasso.context, bitmap, MEMORY, noFade, picasso.debugging); return; &#125; //设置占位图 if (placeholderResId != 0 || placeholderDrawable != null) &#123; PicassoDrawable.setPlaceholder(target, picasso.context, placeholderResId, placeholderDrawable, picasso.debugging); &#125; //创建图片资源请求对象传入Picasso对象的submit方法中 Request request = new Request(picasso, path, resourceId, target, options, transformations, type, skipCache, noFade, errorResId, errorDrawable); picasso.submit(request); &#125; 这里贴出了RequestBuilder的构造方法和into()方法，如果缓存中有图片资源，则直接取出加载，如果没有则新建一个Request（实际上是一个Runnable）对象，并通过调用submit()方法来加载图片。接下来我么看看submit()方法。 12345678910void submit(Request request) &#123; Object target = request.getTarget(); if (target == null) return; cancelExistingRequest(target, request.path); //将ImageView对象和Request对象以键值对的形式存入一个Map对象中 targetsToRequests.put(target, request); //调用Executor对象的submit()方法继续加载过程 request.future = service.submit(request); &#125; 这里我们发现又调用了一个实例service的submit()方法，这个service实际上是一个Executor对象，这个对象也就是我们上面创建Builder的过程中构造的。我们知道Executor是java.util.concurrent类库中的一个类，这里开启了一个线程池用来处理图片请求的线程，由此我们知道这里实际上调用的就是Request的run()方法。 123456789101112@Override public void run() &#123; try &#123; //···省略代码··· picasso.run(this); &#125; catch (final Throwable e) &#123; //···省略代码··· &#125; finally &#123; //···省略代码··· &#125; &#125; 点进去之后，我们发现这里又接着调用了Picasso的run()方法。 123456789void run(Request request) &#123; try &#123; Bitmap result = resolveRequest(request); request.result = result; handler.sendMessage(handler.obtainMessage(REQUEST_COMPLETE, request)); &#125; catch (IOException e) &#123; &#125; &#125; 到了这里我们终于发现实际上请求Bitmap资源的方法是resolveRequest()方法，并且在成功获取到了资源之后发送了一个请求成功的Message，请求成功后的部分稍后再看，这里先看看resolveRequest()。 1234567891011121314151617Bitmap resolveRequest(Request request) throws IOException &#123; //检查缓存中是否存有Bitmap资源对象 Bitmap bitmap = loadFromCache(request); if (bitmap == null) &#123; stats.cacheMiss(); //如果没有则继续请求 bitmap = loadFromType(request); //将请求到的资源存入缓存中 if (bitmap != null &amp;&amp; !request.skipCache) &#123; cache.set(request.key, bitmap); &#125; &#125; else &#123; stats.cacheHit(); &#125; return bitmap; &#125; 接着Bitmap方法还要经过loadFromType()方法。 123456789101112131415161718192021222324252627282930313233private Bitmap loadFromType(Request request) throws IOException &#123; PicassoBitmapOptions options = request.options; Bitmap result = null; //根据资源类型的不同采取不同的请求方法 switch (request.type) &#123; case CONTENT: Uri path = Uri.parse(request.path); result = decodeContentStream(path, options); break; case RESOURCE: Resources resources = context.getResources(); result = decodeResource(resources, request.resourceId, options); break; case FILE: result = decodeFile(request.path, options); break; case STREAM: Response response = null; try &#123; response = loader.load(request.path, request.retryCount == 0); result = decodeStream(response.stream, options); &#125; finally &#123; response.stream.close(); &#125; break; default: throw new AssertionError(\"Unknown request type: \" + request.type); &#125; return result; &#125; 这个方法的内容稍多，我也删去了部分，这里实际上是根据请求的资源类型的不同分别采取不同的方法去请求Bitmap资源，其中前三种不复杂，重头戏是最后一种——网络请求资源，也可以说是使用最为频繁的请求姿势。而这里的请求过程用到了我们在最开始所提到的Loader并调用了其中的loader()方法。Loader实际上是一个接口，loader的实际类型是由Builder创建的loader = Utils.createDefaultLoader(context); 12345678static Loader createDefaultLoader(Context context) &#123; try &#123; Class.forName(\"com.squareup.okhttp.OkHttpClient\"); return OkHttpLoaderCreator.create(context); &#125; catch (ClassNotFoundException e) &#123; return new UrlConnectionLoader(context); &#125; &#125; 从名字上可以看出这里使用了另一个Square大名鼎鼎的开源库OkHttp来处理网络请求。而这里的create()方法则创建了一个OkHttpLoader对象，我们来看看它的loader()方法。 1234567891011@Override public Response load(String url, boolean localCacheOnly) throws IOException &#123; HttpURLConnection connection = client.open(new URL(url)); connection.setUseCaches(true); if (localCacheOnly) &#123; connection.setRequestProperty(\"Cache-Control\", \"only-if-cached\"); &#125; boolean fromCache = parseResponseSourceHeader(connection.getHeaderField(RESPONSE_SOURCE)); return new Response(connection.getInputStream(), fromCache); &#125; 到这里总算是完成了全部的资源请求流程。这里回到上面提到过的请求成功之后会发送一个请求成功的消息。然后我们看看对于这个消息是在哪里接受并且如何处理的。 12345678910111213141516171819202122232425262728final Handler handler = new Handler(Looper.getMainLooper()) &#123; @Override public void handleMessage(Message msg) &#123; Request request = (Request) msg.obj; if (request.future.isCancelled() || request.retryCancelled) &#123; return; &#125; Picasso picasso = request.picasso; switch (msg.what) &#123; case REQUEST_COMPLETE: picasso.targetsToRequests.remove(request.getTarget()); request.complete(); break; case REQUEST_RETRY: picasso.retry(request); break; case REQUEST_DECODE_FAILED: picasso.targetsToRequests.remove(request.getTarget()); request.error(); break; default: throw new AssertionError(\"Unknown handler message received: \" + msg.what); &#125; &#125; &#125;; 原来在Picasso类中，一开始就创建了一个Handler来处理各种请求状态，这个Handler被创建在主线程。在这里，对于请求成功的情况，调用了Request类的complete()方法。 12345678void complete() &#123; ImageView target = this.target.get(); if (target != null) &#123; Context context = picasso.context; boolean debugging = picasso.debugging; PicassoDrawable.setBitmap(target, context, result, loadedFrom, noFade, debugging); &#125; &#125; 这里涉及到了一个工具类PicassoDrawable，调用其中的setBitmap方法来加载图片。 123456789static void setBitmap(ImageView target, Context context, Bitmap bitmap, LoadedFrom loadedFrom, boolean noFade, boolean debugging) &#123; PicassoDrawable picassoDrawable = extractPicassoDrawable(target); if (picassoDrawable != null) &#123; picassoDrawable.setBitmap(bitmap, loadedFrom, noFade); &#125; else &#123; target.setImageDrawable(new PicassoDrawable(context, bitmap, loadedFrom, noFade, debugging)); &#125; &#125; 最后到这里算是彻底地完成了整个请求加载到流程。后面我还会去分析这个库的其他部分，所以说。。。。。。我就先去歇一会啦！！！","categories":[{"name":"拆轮子系列","slug":"拆轮子系列","permalink":"http://yoursite.com/categories/拆轮子系列/"}],"tags":[{"name":"Picasso","slug":"Picasso","permalink":"http://yoursite.com/tags/Picasso/"},{"name":"源码","slug":"源码","permalink":"http://yoursite.com/tags/源码/"}],"keywords":[{"name":"拆轮子系列","slug":"拆轮子系列","permalink":"http://yoursite.com/categories/拆轮子系列/"}]},{"title":"一个新的开始","slug":"一个新的开始","date":"2016-09-27T16:00:00.000Z","updated":"2017-02-06T15:17:08.000Z","comments":true,"path":"2016/09/28/一个新的开始/","link":"","permalink":"http://yoursite.com/2016/09/28/一个新的开始/","excerpt":"","text":"从开始学习Android到现在不知不觉有一年出头了，作为学生也总算是到了大三了。但是，一名coder现在才想起来开个自己的博客好像也是稍微有点迟啊（滑稽脸）。虽然不知道未来在这博客里能写多少有意思的东西，但是既然已经开了，那就把它作为一个标志，象征一个新的学习阶段的开始吧。 好像并没有学多少东西啊我自己是做Android的，不过现在想想貌似会的也就是Android上的东西。从大一开始接触Java，那么吊儿郎当地学了那么久，不敢说自己会多少东西，但至少装装样子还是可以的。 其实说到底我所学的东西也就是“Java——Android”这样简单的两点一线，再往细的说其实也就仅限于Android应用的开发。虽然曾经也看了一些Android的源码，想要深入地去学学，但是现在仔细想想，真的是一点都记不起来了（这应该也是开博客的原因吧）。 想到这里不禁感慨要学的东西还有好多，再加上明年就要不得不去面对实习的压力了，觉得貌似将会度过大学期间最为充（麻）实（烦）的一年了。所以就像上面写的一样，从这篇博客开始也得稍微振作一下，把我这个懒家伙所有能拿出来的精力给好好释放一下了。 一些小小的计划现在正在写一个Github的客户端，这应该是我第一个完整的正式的项目了，所以我首先的期望就是能够把这个项目完完整整的坚持下来，虽然一个人写还是挺累的，但是想到写完之后的效果，另外说不定还能上线，还有点小激动呢。 写项目刚开始的时候还是感觉自己挺得心应手，但是随着代码量逐渐多了起来，程序的模块逐渐复杂了起来，重构以前写的模块已经成了家常便饭，想想真心觉得自己对工程项目的处理水平还真是有限。为了对自己的这方面有所提高，首当其冲的就是设计模式的学习了。虽然设计模式以前也有所学习，但是似乎也仅限于理论水平，于是这次决定把这东西再重新拾起来，并把它运用起来。除了重学设计模式这个想法外，看看别人写的项目也是必不可少的，github上的大神那么多，取取经自然是理所当然的啦。 另外就是决定好好拆一拆轮子。上面也提到我其实对Android的学习也仅仅一直都是应用层这一面，况且自我感觉学的还不深，所以拆一拆自然也就很有必要了。对于拆轮子这种事，肯定还是得挑那些超级有名的轮子来拆比较好。我的想法是首先从Picasso这个图片加载库开始，然后就是OkHttp、EventBus、RxJava……（真是又多又难啊，不知道我什么时候才能看完）还有一个方面就是Android源码的学习。对于这个，市面上这么多不错的书，配合着去看源码，本人还是有些自信的。 最后，我还有的一个想法就是能够多点一些技能树，毕竟只会这么一个方面的内容终归还是不够的。第一个想点点技能树就是C++了。虽然100个不愿意，但是学到现在再也绕不过C++终归是个不争点事实，不管是要学NDK开发还是以后其他的内容C++就在眼前，只能面对面硬杠了。另外就是自己也有那么一点想学Python的意思，这个倒不是什么必须的，就是觉得挺有意思，就当本职外的兴趣在休闲的时候学学吧。 最后往上一看，虽然写的短，但是要干的事情真是多啊，不多说了，要去学习了。。。。。。","categories":[{"name":"随手写写","slug":"随手写写","permalink":"http://yoursite.com/categories/随手写写/"}],"tags":[{"name":"思考","slug":"思考","permalink":"http://yoursite.com/tags/思考/"}],"keywords":[{"name":"随手写写","slug":"随手写写","permalink":"http://yoursite.com/categories/随手写写/"}]}]}