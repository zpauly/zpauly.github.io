{"meta":{"title":"zpauly's blog","subtitle":null,"description":null,"author":"zpauly","url":"http://yoursite.com"},"pages":[{"title":"all-archives","date":"2016-09-30T12:56:12.000Z","updated":"2016-09-30T12:57:22.000Z","comments":true,"path":"all-archives/index.html","permalink":"http://yoursite.com/all-archives/index.html","excerpt":"","text":""},{"title":"all-tags","date":"2016-09-30T12:55:54.000Z","updated":"2016-09-30T12:57:59.000Z","comments":true,"path":"all-tags/index.html","permalink":"http://yoursite.com/all-tags/index.html","excerpt":"","text":""},{"title":"all-categories","date":"2016-09-30T12:55:33.000Z","updated":"2016-09-30T12:57:40.000Z","comments":true,"path":"all-categories/index.html","permalink":"http://yoursite.com/all-categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Picasso源码学习（二）","slug":"Picasso源码学习（二）","date":"2016-10-18T16:00:00.000Z","updated":"2016-10-20T07:43:56.000Z","comments":true,"path":"2016/10/19/Picasso源码学习（二）/","link":"","permalink":"http://yoursite.com/2016/10/19/Picasso源码学习（二）/","excerpt":"继上一篇文章简单分析了一下Picasso的图片加载流程，这次就接着小小地研究一把图片加载中最为重要的一个部分——缓存机制。当然，这段源码阅读过程自然是以上一篇文章中Picasso请求加载流程为基础的。","text":"继上一篇文章简单分析了一下Picasso的图片加载流程，这次就接着小小地研究一把图片加载中最为重要的一个部分——缓存机制。当然，这段源码阅读过程自然是以上一篇文章中Picasso请求加载流程为基础的。 源码阅读从上一篇的内容来看，在图片加载的过程中调用了一个方法。 1Picasso.quickMemoryCacheCheck(target, requestKey); 这个方法从名字里也可以看出来它的作用是从内存中检查所需的Bitmap资源是否已经存在，如果存在则从缓存中取出来，所以我们首先来看看这个方法干了什么。 123456789101112Bitmap quickMemoryCacheCheck(Object target, String key) &#123; //通过键key作为索引来从缓存中查找Bitmap对象，如果没有则返回null Bitmap cached = cache.get(key); cancelExistingRequest(target, key); if (cached != null) &#123; stats.cacheHit(); &#125; return cached; &#125; 这里关心的主要是cache.get()的调用，这里的cache是一个Cache对象，Cache是一个被设计来专门用于缓存的接口，不是很复杂，在看看cache的具体类型之前，先来看看这个接口。 1234567891011121314151617181920212223242526272829303132public interface Cache &#123; //根据特定的键来从缓存中获取图片资源，如果缓存中没有则返回null Bitmap get(String key); //将一个String对象和一个Bitmap对象以键值对的形式存入缓存中 void set(String key, Bitmap bitmap); //返回当前缓存中的内容大小 int size(); //返回缓存所能存放的最大数据量 int maxSize(); //一个空缓存对象，表示没有存储任何内容 Cache NONE = new Cache() &#123; @Override public Bitmap get(String key) &#123; return null; &#125; @Override public void set(String key, Bitmap bitmap) &#123; // Ignore. &#125; @Override public int size() &#123; return 0; &#125; @Override public int maxSize() &#123; return 0; &#125; &#125;;&#125; 对于每一个方法这里都注释了，也极易明白。再回过头来看看cache的创建过程来看看它的具体类型。 123memoryCache = new LruCache(context);new Picasso(context, loader, service, memoryCache, stats); 这里的memoryCache的类型便是Cache类型，而这个创建的代码就在是在Picasso.Builder的构造函数中，最后被传入Picasso的构造函数，赋值给cache。从这里可以看出来它的具体类型是LruCache。从名字中不难猜出，它实际上是通过使用LRU算法实现的缓存存取过程的。这里的LruCache并不是我们熟知的Android中support-v4包中的类LruCache，但其实现原理都是一摸一样的，都是采用LRU算法将所需缓存的数据存进一个LinkedHashMap中。 上面所提到的便是Picasso的内存缓存机制，那么它的磁盘缓存是通过什么方法实现的呢。其实Picasso的磁盘缓存是通过OkHttp的缓存功能来实现的。这里我们回到Loader类中的createDefaultLoader方法。 12345678static Loader createDefaultLoader(Context context) &#123; try &#123; Class.forName(\"com.squareup.okhttp.OkHttpClient\"); return OkHttpLoaderCreator.create(context); &#125; catch (ClassNotFoundException e) &#123; return new UrlConnectionLoader(context); &#125; &#125; 这个方法的执行过程便是在发现内存缓存中没有所想要的内容时开始通过网络发起请求的时候所发生的。这里先前介绍过实际请求调用的便是其中OkHttpLoader中的loader()方法。 1234567891011@Override public Response load(String url, boolean localCacheOnly) throws IOException &#123; HttpURLConnection connection = client.open(new URL(url)); connection.setUseCaches(true); if (localCacheOnly) &#123; connection.setRequestProperty(\"Cache-Control\", \"only-if-cached\"); &#125; boolean fromCache = parseResponseSourceHeader(connection.getHeaderField(RESPONSE_SOURCE)); return new Response(connection.getInputStream(), fromCache); &#125; 从这里我们便可以一眼看出来，在发起请求的时候，所设置的属性便是对请求内容进行缓存，也就是说如果OkHttp的缓存中已经有了所需的图片资源，那就直接获取，如果没有则继续请求。 通过我们的分析算是证实了Picasso的磁盘缓存机制是通过OkHttp来实现的。但是，Square公司早已推了OkHttp3，但即使是checkout到最新版本的Picasso也并没有从中发现OkHttp3到影子，这就带来一个问题，实际使用Picasso到时候就会由于出现没有使用OkHttp的情况而出现无法使用磁盘缓存的问题。这里便向想要结局这个问题的同学推荐一个库picasso2-okhttp3-downloader，这时Jake大神为这个问题所专门写的，其中的实现机制其实很简单，和Picasso内的OkHttpLoader如出一辙，一看便知。 最后这部分的不长，主要就是我自己查看Picasso缓存机制的一个简单的流程记录，内容也很简单，同时又不可或缺所以就单独拿出来了，还是恨通俗易懂的。","categories":[{"name":"拆轮子系列","slug":"拆轮子系列","permalink":"http://yoursite.com/categories/拆轮子系列/"}],"tags":[{"name":"Picasso","slug":"Picasso","permalink":"http://yoursite.com/tags/Picasso/"},{"name":"源码","slug":"源码","permalink":"http://yoursite.com/tags/源码/"}],"keywords":[{"name":"拆轮子系列","slug":"拆轮子系列","permalink":"http://yoursite.com/categories/拆轮子系列/"}]},{"title":"Picasso源码学习（一）","slug":"Picasso源码学习（一）","date":"2016-10-18T12:53:34.000Z","updated":"2016-10-20T07:45:16.000Z","comments":true,"path":"2016/10/18/Picasso源码学习（一）/","link":"","permalink":"http://yoursite.com/2016/10/18/Picasso源码学习（一）/","excerpt":"从这里开始我会开始阅读一款来自于Square的大名鼎鼎的图片处理库Picasso，将这个过程以博客的形式记录下来，一方面是一种学习记录，另一方面也是一种督促啦。","text":"从这里开始我会开始阅读一款来自于Square的大名鼎鼎的图片处理库Picasso，将这个过程以博客的形式记录下来，一方面是一种学习记录，另一方面也是一种督促啦。 准备一切的第一步当然是首先把源码从github上clone下来。 1git clone https://github.com/square/picasso.git 稍等片刻，Picasso的源码就被clone到了自己的电脑上。 当然，现在我们这里的就是Picasso的作者所commit的最新的代码，但是所要看的并不是这个内容，这里需要选择一个release版本。 之所以选的是最早的1.0.0版本，是因为作为最早的版本，后面的所有版本都是基于这个版本进行编写的，阅读最早的版本可以更好地了解整个项目的构架。另外，作为最早的版本，这个版本肯定也是所有版本里最容易阅读的。我们接着将项目checkout到该版本。 1git checkout dea2e24 接下来就是酥爽的源码阅读之旅了。 源码阅读大致了解根据Picasso的使用方法，首先我们会使用 Picasso.with(context)，因此我们就从这里开始看看在我们使用Picasso的时候它都做了些什么。 1234567public static Picasso with(Context context) &#123; if (singleton == null) &#123; //构造Picasso对象 singleton = new Builder(context).build(); &#125; return singleton; &#125; 这是一个Picasso中的静态方法，很明显是构造了一个Picasso的单例，并且在代码构架中使用了Build模式建立了这个对象。这里的关键是Builder对象的构造过程里都做了什么。 12345678910111213141516171819public Picasso build() &#123; Context context = this.context; //创建用于加载图片的对象loader if (loader == null) &#123; loader = Utils.createDefaultLoader(context); &#125; //创建用于缓存的对象memoryCache if (memoryCache == null) &#123; memoryCache = new LruCache(context); &#125; //创建用于请求的服务对象service if (service == null) &#123; service = Executors.newFixedThreadPool(3, new Utils.PicassoThreadFactory()); &#125; //缓存状态对象stats Stats stats = new Stats(memoryCache); return new Picasso(context, loader, service, memoryCache, stats); &#125; 从几个属性的名字里可以看出来，Picasso对象中有几个很重要的属性loader、memory、service和stats。其他先放一边，首先从这个loader对象入手，来分析整个加载流程。 加载流程创建完了Picasso对象之后一般我们一定会调用的代码会是这样的 123Picasso.with(context) .load(url) .into(imageview); 我们可以推测到代码中的后两行做的事情就是将获取资源，然后将其加载进ImageView中。 1234public RequestBuilder load(String path) &#123; //···省略代码··· return new RequestBuilder(this, path, Type.STREAM); &#125; load()方法实际上所做的也就是创建一个RequestBuilder对象，并返回这个对象，into()方法也是这个类里的。 123456789101112131415161718192021222324252627282930RequestBuilder(Picasso picasso, String path, Request.Type type) &#123; this.picasso = picasso; this.path = path; this.resourceId = 0; this.type = type; &#125;public void into(ImageView target) &#123; //创建图片缓存索引key String requestKey = createKey(path, resourceId, options, transformations); //根据key从缓存中查询Bitmap对象 Bitmap bitmap = picasso.quickMemoryCacheCheck(target, requestKey); if (bitmap != null) &#123; //如果存在已经存在于缓存中的Bitmap对象，则加载进ImageView中 PicassoDrawable.setBitmap(target, picasso.context, bitmap, MEMORY, noFade, picasso.debugging); return; &#125; //设置占位图 if (placeholderResId != 0 || placeholderDrawable != null) &#123; PicassoDrawable.setPlaceholder(target, picasso.context, placeholderResId, placeholderDrawable, picasso.debugging); &#125; //创建图片资源请求对象传入Picasso对象的submit方法中 Request request = new Request(picasso, path, resourceId, target, options, transformations, type, skipCache, noFade, errorResId, errorDrawable); picasso.submit(request); &#125; 这里贴出了RequestBuilder的构造方法和into()方法，如果缓存中有图片资源，则直接取出加载，如果没有则新建一个Request（实际上是一个Runnable）对象，并通过调用submit()方法来加载图片。接下来我么看看submit()方法。 12345678910void submit(Request request) &#123; Object target = request.getTarget(); if (target == null) return; cancelExistingRequest(target, request.path); //将ImageView对象和Request对象以键值对的形式存入一个Map对象中 targetsToRequests.put(target, request); //调用Executor对象的submit()方法继续加载过程 request.future = service.submit(request); &#125; 这里我们发现又调用了一个实例service的submit()方法，这个service实际上是一个Executor对象，这个对象也就是我们上面创建Builder的过程中构造的。我们知道Executor是java.util.concurrent类库中的一个类，这里开启了一个线程池用来处理图片请求的线程，由此我们知道这里实际上调用的就是Request的run()方法。 123456789101112@Override public void run() &#123; try &#123; //···省略代码··· picasso.run(this); &#125; catch (final Throwable e) &#123; //···省略代码··· &#125; finally &#123; //···省略代码··· &#125; &#125; 点进去之后，我们发现这里又接着调用了Picasso的run()方法。 123456789void run(Request request) &#123; try &#123; Bitmap result = resolveRequest(request); request.result = result; handler.sendMessage(handler.obtainMessage(REQUEST_COMPLETE, request)); &#125; catch (IOException e) &#123; &#125; &#125; 到了这里我们终于发现实际上请求Bitmap资源的方法是resolveRequest()方法，并且在成功获取到了资源之后发送了一个请求成功的Message，请求成功后的部分稍后再看，这里先看看resolveRequest()。 1234567891011121314151617Bitmap resolveRequest(Request request) throws IOException &#123; //检查缓存中是否存有Bitmap资源对象 Bitmap bitmap = loadFromCache(request); if (bitmap == null) &#123; stats.cacheMiss(); //如果没有则继续请求 bitmap = loadFromType(request); //将请求到的资源存入缓存中 if (bitmap != null &amp;&amp; !request.skipCache) &#123; cache.set(request.key, bitmap); &#125; &#125; else &#123; stats.cacheHit(); &#125; return bitmap; &#125; 接着Bitmap方法还要经过loadFromType()方法。 123456789101112131415161718192021222324252627282930313233private Bitmap loadFromType(Request request) throws IOException &#123; PicassoBitmapOptions options = request.options; Bitmap result = null; //根据资源类型的不同采取不同的请求方法 switch (request.type) &#123; case CONTENT: Uri path = Uri.parse(request.path); result = decodeContentStream(path, options); break; case RESOURCE: Resources resources = context.getResources(); result = decodeResource(resources, request.resourceId, options); break; case FILE: result = decodeFile(request.path, options); break; case STREAM: Response response = null; try &#123; response = loader.load(request.path, request.retryCount == 0); result = decodeStream(response.stream, options); &#125; finally &#123; response.stream.close(); &#125; break; default: throw new AssertionError(\"Unknown request type: \" + request.type); &#125; return result; &#125; 这个方法的内容稍多，我也删去了部分，这里实际上是根据请求的资源类型的不同分别采取不同的方法去请求Bitmap资源，其中前三种不复杂，重头戏是最后一种——网络请求资源，也可以说是使用最为频繁的请求姿势。而这里的请求过程用到了我们在最开始所提到的Loader并调用了其中的loader()方法。Loader实际上是一个接口，loader的实际类型是由Builder创建的loader = Utils.createDefaultLoader(context); 12345678static Loader createDefaultLoader(Context context) &#123; try &#123; Class.forName(\"com.squareup.okhttp.OkHttpClient\"); return OkHttpLoaderCreator.create(context); &#125; catch (ClassNotFoundException e) &#123; return new UrlConnectionLoader(context); &#125; &#125; 从名字上可以看出这里使用了另一个Square大名鼎鼎的开源库OkHttp来处理网络请求。而这里的create()方法则创建了一个OkHttpLoader对象，我们来看看它的loader()方法。 1234567891011@Override public Response load(String url, boolean localCacheOnly) throws IOException &#123; HttpURLConnection connection = client.open(new URL(url)); connection.setUseCaches(true); if (localCacheOnly) &#123; connection.setRequestProperty(\"Cache-Control\", \"only-if-cached\"); &#125; boolean fromCache = parseResponseSourceHeader(connection.getHeaderField(RESPONSE_SOURCE)); return new Response(connection.getInputStream(), fromCache); &#125; 到这里总算是完成了全部的资源请求流程。这里回到上面提到过的请求成功之后会发送一个请求成功的消息。然后我们看看对于这个消息是在哪里接受并且如何处理的。 12345678910111213141516171819202122232425262728final Handler handler = new Handler(Looper.getMainLooper()) &#123; @Override public void handleMessage(Message msg) &#123; Request request = (Request) msg.obj; if (request.future.isCancelled() || request.retryCancelled) &#123; return; &#125; Picasso picasso = request.picasso; switch (msg.what) &#123; case REQUEST_COMPLETE: picasso.targetsToRequests.remove(request.getTarget()); request.complete(); break; case REQUEST_RETRY: picasso.retry(request); break; case REQUEST_DECODE_FAILED: picasso.targetsToRequests.remove(request.getTarget()); request.error(); break; default: throw new AssertionError(\"Unknown handler message received: \" + msg.what); &#125; &#125; &#125;; 原来在Picasso类中，一开始就创建了一个Handler来处理各种请求状态，这个Handler被创建在主线程。在这里，对于请求成功的情况，调用了Request类的complete()方法。 12345678void complete() &#123; ImageView target = this.target.get(); if (target != null) &#123; Context context = picasso.context; boolean debugging = picasso.debugging; PicassoDrawable.setBitmap(target, context, result, loadedFrom, noFade, debugging); &#125; &#125; 这里涉及到了一个工具类PicassoDrawable，调用其中的setBitmap方法来加载图片。 123456789static void setBitmap(ImageView target, Context context, Bitmap bitmap, LoadedFrom loadedFrom, boolean noFade, boolean debugging) &#123; PicassoDrawable picassoDrawable = extractPicassoDrawable(target); if (picassoDrawable != null) &#123; picassoDrawable.setBitmap(bitmap, loadedFrom, noFade); &#125; else &#123; target.setImageDrawable(new PicassoDrawable(context, bitmap, loadedFrom, noFade, debugging)); &#125; &#125; 最后到这里算是彻底地完成了整个请求加载到流程。后面我还会去分析这个库的其他部分，所以说。。。。。。我就先去歇一会啦！！！","categories":[{"name":"拆轮子系列","slug":"拆轮子系列","permalink":"http://yoursite.com/categories/拆轮子系列/"}],"tags":[{"name":"Picasso","slug":"Picasso","permalink":"http://yoursite.com/tags/Picasso/"},{"name":"源码","slug":"源码","permalink":"http://yoursite.com/tags/源码/"}],"keywords":[{"name":"拆轮子系列","slug":"拆轮子系列","permalink":"http://yoursite.com/categories/拆轮子系列/"}]},{"title":"一个新的开始","slug":"一个新的开始","date":"2016-09-27T16:00:00.000Z","updated":"2016-10-20T07:41:41.000Z","comments":true,"path":"2016/09/28/一个新的开始/","link":"","permalink":"http://yoursite.com/2016/09/28/一个新的开始/","excerpt":"从开始学习Android到现在不知不觉有一年出头了，作为学生也总算是到了大三了。但是，一名coder现在才想起来开个自己的博客好像也是稍微有点迟啊（滑稽脸）。虽然不知道未来在这博客里能写多少有意思的东西，但是既然已经开了，那就把它作为一个标志，象征一个新的学习阶段的开始吧。","text":"从开始学习Android到现在不知不觉有一年出头了，作为学生也总算是到了大三了。但是，一名coder现在才想起来开个自己的博客好像也是稍微有点迟啊（滑稽脸）。虽然不知道未来在这博客里能写多少有意思的东西，但是既然已经开了，那就把它作为一个标志，象征一个新的学习阶段的开始吧。 好像并没有学多少东西啊我自己是做Android的，不过现在想想貌似会的也就是Android上的东西。从大一开始接触Java，那么吊儿郎当地学了那么久，不敢说自己会多少东西，但至少装装样子还是可以的。 其实说到底我所学的东西也就是“Java——Android”这样简单的两点一线，再往细的说其实也就仅限于Android应用的开发。虽然曾经也看了一些Android的源码，想要深入地去学学，但是现在仔细想想，真的是一点都记不起来了（这应该也是开博客的原因吧）。 想到这里不禁感慨要学的东西还有好多，再加上明年就要不得不去面对实习的压力了，觉得貌似将会度过大学期间最为充（麻）实（烦）的一年了。所以就像上面写的一样，从这篇博客开始也得稍微振作一下，把我这个懒家伙所有能拿出来的精力给好好释放一下了。 一些小小的计划现在正在写一个Github的客户端，这应该是我第一个完整的正式的项目了，所以我首先的期望就是能够把这个项目完完整整的坚持下来，虽然一个人写还是挺累的，但是想到写完之后的效果，另外说不定还能上线，还有点小激动呢。 写项目刚开始的时候还是感觉自己挺得心应手，但是随着代码量逐渐多了起来，程序的模块逐渐复杂了起来，重构以前写的模块已经成了家常便饭，想想真心觉得自己对工程项目的处理水平还真是有限。为了对自己的这方面有所提高，首当其冲的就是设计模式的学习了。虽然设计模式以前也有所学习，但是似乎也仅限于理论水平，于是这次决定把这东西再重新拾起来，并把它运用起来。除了重学设计模式这个想法外，看看别人写的项目也是必不可少的，github上的大神那么多，取取经自然是理所当然的啦。 另外就是决定好好拆一拆轮子。上面也提到我其实对Android的学习也仅仅一直都是应用层这一面，况且自我感觉学的还不深，所以拆一拆自然也就很有必要了。对于拆轮子这种事，肯定还是得挑那些超级有名的轮子来拆比较好。我的想法是首先从Picasso这个图片加载库开始，然后就是OkHttp、EventBus、RxJava……（真是又多又难啊，不知道我什么时候才能看完）还有一个方面就是Android源码的学习。对于这个，市面上这么多不错的书，配合着去看源码，本人还是有些自信的。 最后，我还有的一个想法就是能够多点一些技能树，毕竟只会这么一个方面的内容终归还是不够的。第一个想点点技能树就是C++了。虽然100个不愿意，但是学到现在再也绕不过C++终归是个不争点事实，不管是要学NDK开发还是以后其他的内容C++就在眼前，只能面对面硬杠了。另外就是自己也有那么一点想学Python的意思，这个倒不是什么必须的，就是觉得挺有意思，就当本职外的兴趣在休闲的时候学学吧。 最后往上一看，虽然写的短，但是要干的事情真是多啊，不多说了，要去学习了。。。。。。","categories":[{"name":"随手写写","slug":"随手写写","permalink":"http://yoursite.com/categories/随手写写/"}],"tags":[{"name":"思考","slug":"思考","permalink":"http://yoursite.com/tags/思考/"}],"keywords":[{"name":"随手写写","slug":"随手写写","permalink":"http://yoursite.com/categories/随手写写/"}]}]}