<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android插件化入门资料]]></title>
      <url>http://yoursite.com/2017/02/06/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%85%A5%E9%97%A8%E8%B5%84%E6%96%99/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>最近一直在学习Android Framework层的源码，而插件化自当是我想到的关于这方面的最好实践。但毕竟插件化的难度还是很大的，因此在插件化的入门过程中，自己总是会绕得云里雾里。不过幸运的是我发现了一个系列的文章，可以说是大大提高了我这方面的学习效率。</p>
<!--excerpt-->
<p><a href="http://weishu.me/2016/01/28/understand-plugin-framework-proxy-hook/" target="_blank" rel="external">Hook机制之动态代理</a></p>
<p><a href="http://weishu.me/2016/02/16/understand-plugin-framework-binder-hook/" target="_blank" rel="external">Hook机制之Binder Hook</a></p>
<p><a href="http://weishu.me/2016/03/07/understand-plugin-framework-ams-pms-hook/" target="_blank" rel="external">Hook机制之AMS&amp;PMS</a></p>
<p><a href="http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/" target="_blank" rel="external">Activity生命周期管理</a></p>
<p><a href="http://weishu.me/2016/04/05/understand-plugin-framework-classloader/" target="_blank" rel="external">插件加载机制</a></p>
<p><a href="http://weishu.me/2016/04/12/understand-plugin-framework-receiver/" target="_blank" rel="external">广播的管理</a></p>
<p><a href="http://weishu.me/2016/05/11/understand-plugin-framework-service/" target="_blank" rel="external">Service的插件化</a></p>
<p><a href="http://weishu.me/2016/07/12/understand-plugin-framework-content-provider/" target="_blank" rel="external">ContentProvider的插件化</a></p>
<p>在这里做个分享，顺便自己也收藏一下，以后要是有什么记不得的也常来看看(ง •̀_•́)ง</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NDK开发学习（二）：JNI规则]]></title>
      <url>http://yoursite.com/2017/02/06/NDK%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AJNI%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<!--excerpt-->
<h5 id="JVM查找native方法"><a href="#JVM查找native方法" class="headerlink" title="JVM查找native方法"></a>JVM查找native方法</h5><p>JVM 查找 native 方法有两种方式：</p>
<ul>
<li>按照 JNI 规范的命名规则</li>
<li>调用 JNI 提供的 RegisterNatives 函数，将本地函数注册到 JVM 中。</li>
</ul>
<p>在编译我们所写的c/c++代码成动态库的时候，有两个头文件是需要的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; jni_md.h</div><div class="line"></div><div class="line">```c++</div><div class="line">#ifndef _JAVASOFT_JNI_MD_H_</div><div class="line">#define _JAVASOFT_JNI_MD_H_</div><div class="line"></div><div class="line">#define JNIEXPORT     __attribute__((visibility(&quot;default&quot;)))</div><div class="line">#define JNIIMPORT     __attribute__((visibility(&quot;default&quot;)))</div><div class="line">#define JNICALL</div><div class="line"></div><div class="line">typedef int jint;</div><div class="line">#ifdef _LP64 /* 64-bit */</div><div class="line">typedef long jlong;</div><div class="line">#else</div><div class="line">typedef long long jlong;</div><div class="line">#endif</div><div class="line"></div><div class="line">typedef signed char jbyte;</div><div class="line">#endif /* !_JAVASOFT_JNI_MD_H_ */</div></pre></td></tr></table></figure></p>
<p>当然，可以看到在mac平台下<code>JNIEXPORT</code>、<code>JNIIMPORT</code>、<code>JNICALL</code>并没有定义具体内容，是个空定义。</p>
<p>至于函数的命名规则，在<a href="/2017/02/06/NDK开发学习（一）：尝试JNI/" title="NDK开发学习（一）：尝试JNI">NDK开发学习（一）：尝试JNI</a>中有提到。</p>
<h5 id="JNI数据类型"><a href="#JNI数据类型" class="headerlink" title="JNI数据类型"></a>JNI数据类型</h5><p>首先是一个非常特殊的类型——<code>JNIEnv*</code>。它是定义任意 native 函数的第一个参数，指向 JVM 函数表的指针，函数表中的每一个入口指向一个 JNI 函数，每个函数用于访问 JVM 中特定的数据结构。</p>
<p>其余的下面两张图可以概括</p>
<img src="/2017/02/06/NDK开发学习（二）：JNI规则/NDK开发学习（二）：JNI规则_1.png" alt="NDK开发学习（二）：JNI规则_1.png" title="">
<img src="/2017/02/06/NDK开发学习（二）：JNI规则/NDK开发学习（二）：JNI规则_2.png" alt="NDK开发学习（二）：JNI规则_2.png" title="">
<p>值得注意的是JNI中所与Java中的基本数据类型对应的类型的值是可以在程序中直接使用到的，但是引用数据类型则不行。这是由于与基本类型不同，引用类型所传入的是一个指针类型，指向那个对象在JVM内存中的地址。要想从JVM内存中访问到这些数据，就需要通过<code>JNIEnv*</code>来实现。</p>
<p>##### </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NDK开发学习（一）：尝试JNI]]></title>
      <url>http://yoursite.com/2017/02/06/NDK%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%B0%9D%E8%AF%95JNI/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<!--excerpt-->
<p>注：此过程在mac环境下</p>
<h3 id="JNI开发流程简介"><a href="#JNI开发流程简介" class="headerlink" title="JNI开发流程简介"></a>JNI开发流程简介</h3><ul>
<li>编写声明了 native 方法的 Java 类</li>
<li>将 Java 源代码编译成 class 字节码文件</li>
<li>用 javah -jni 命令生成<code>.h</code>头文件（javah 是 jdk 自带的一个命令，-jni 参数表示将 class 中用native 声明的函数生成 JNI 规则的函数）</li>
<li>用本地代码实现<code>.h头</code>文件中的函数</li>
<li>将本地代码编译成动态库（Windows：*.dll，linux/unix：*.so，mac os x：*.jnilib）</li>
<li>拷贝动态库至 java.library.path 本地库搜索目录下，并运行 Java 程序</li>
</ul>
<h3 id="尝试JNI"><a href="#尝试JNI" class="headerlink" title="尝试JNI"></a>尝试JNI</h3><h5 id="一-定义一个native-函数"><a href="#一-定义一个native-函数" class="headerlink" title="一.定义一个native 函数"></a>一.定义一个native 函数</h5><blockquote>
<p>HelloWorld.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">    <span class="comment">//所需加载的动态库的完整路径	System.load("/Users/zhangyu/Desktop/JavaProjects/LearnJNI/jni/libHelloWorld.jnilib");</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">        String text = sayHello(<span class="string">"zpauly"</span>);</div><div class="line">        System.out.println(text);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="二-使用将-java文件编译为-class文件"><a href="#二-使用将-java文件编译为-class文件" class="headerlink" title="二.使用将.java文件编译为.class文件"></a>二.使用将.java文件编译为.class文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac src/HelloWorld.java -d bin</div></pre></td></tr></table></figure>
<p>这里我使用-d命令将class文件生成到指定目录下</p>
<h5 id="三-根据-class文件生成-h头文件"><a href="#三-根据-class文件生成-h头文件" class="headerlink" title="三.根据.class文件生成.h头文件"></a>三.根据.class文件生成.h头文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javah -jni -classpath bin -d jni HelloWorld</div></pre></td></tr></table></figure>
<p>默认生成的头文件的名称为：包名+类名.h，如：若此处HelloWorld的包名为<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">javah -jni命令参数</div><div class="line"></div><div class="line">- classpath：类搜索路径，这里表示从当前的 bin 目录下查找</div><div class="line">- d：将生成的头文件放到当前的 jni 目录下</div><div class="line">- o： 指定生成的头文件名称，默认以类全路径名生成（包名+类名.h）</div><div class="line"></div><div class="line">此时生成的头文件为</div><div class="line"></div><div class="line">&gt; HelloWorld.h</div><div class="line"></div><div class="line">```c++</div><div class="line">/* DO NOT EDIT THIS FILE - it is machine generated */</div><div class="line">#include &lt;jni.h&gt;</div><div class="line">/* Header for class HelloWorld */</div><div class="line"></div><div class="line">#ifndef _Included_HelloWorld</div><div class="line">#define _Included_HelloWorld</div><div class="line">#ifdef __cplusplus</div><div class="line">extern &quot;C&quot; &#123;</div><div class="line">#endif</div><div class="line">/*</div><div class="line"> * Class:     HelloWorld</div><div class="line"> * Method:    sayHello</div><div class="line"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</div><div class="line"> */</div><div class="line">JNIEXPORT jstring JNICALL Java_HelloWorld_sayHello</div><div class="line">  (JNIEnv *, jclass, jstring);</div><div class="line"></div><div class="line">#ifdef __cplusplus</div><div class="line">&#125;</div><div class="line">#endif</div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<h5 id="四-实现头文件中的函数"><a href="#四-实现头文件中的函数" class="headerlink" title="四.实现头文件中的函数"></a>四.实现头文件中的函数</h5><blockquote>
<p>HelloWorld.c</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HelloWorld.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     HelloWorld</div><div class="line"> * Method:    sayHello</div><div class="line"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_HelloWorld_sayHello</span><span class="params">(JNIEnv *env, jclass clazz, jstring j_str)</span> </span>&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *c_str = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">char</span> buff[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line">    c_str = (*env)-&gt;GetStringUTFChars(env, j_str, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">if</span> (c_str == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"out of memory.\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, j_str, c_str);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Java String:%s\n"</span>, c_str);</div><div class="line">    <span class="built_in">sprintf</span>(buff, <span class="string">"hello %s\n"</span>, c_str);</div><div class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, buff);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h5 id="五-将写好的c-c-代码编译为本地动态库"><a href="#五-将写好的c-c-代码编译为本地动态库" class="headerlink" title="五.将写好的c/c++代码编译为本地动态库"></a>五.将写好的c/c++代码编译为本地动态库</h5><p>动态库命名规则：lib+动态库文件名+后缀</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -dynamiclib -o jni/libHelloWorld.jnilib jni/HelloWorld.c -framework JavaVM -I/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/include/darwin</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>-dynamiclib：表示编译成动态链接库</li>
<li>-o：指定动态链接库编译后生成的路径及文件名</li>
<li>-framework JavaVM -I：编译 JNI 需要用到 JVM 的头文件(<code>jni.h</code>)，第一个目录是平台无关的，第二个目录是与操作系统平台相关的头文件</li>
</ul>
<h5 id="六-运行Java程序"><a href="#六-运行Java程序" class="headerlink" title="六.运行Java程序"></a>六.运行Java程序</h5><p>运行效果</p>
<img src="/2017/02/06/NDK开发学习（一）：尝试JNI/NDK开发学习（一）：尝试JNI_1.png" alt="NDK开发学习（一）：尝试JNI_1.png" title="">
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Picasso源码学习（二）]]></title>
      <url>http://yoursite.com/2016/10/19/Picasso%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>继上一篇文章简单分析了一下<strong><em>Picasso</em></strong>的图片加载流程，这次就接着小小地研究一把图片加载中最为重要的一个部分——缓存机制。当然，这段源码阅读过程自然是以上一篇文章中<a href="https://zpauly.github.io/2016/10/18/Picasso%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external"><strong><em>Picasso请求加载流程</em></strong></a>为基础的。</p>
<!--excerpt-->
<h1 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h1><p>从上一篇的内容来看，在图片加载的过程中调用了一个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Picasso.quickMemoryCacheCheck(target, requestKey);</div></pre></td></tr></table></figure>
<p>这个方法从名字里也可以看出来它的作用是从内存中检查所需的<strong><em>Bitmap</em></strong>资源是否已经存在，如果存在则从缓存中取出来，所以我们首先来看看这个方法干了什么。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">Bitmap <span class="title">quickMemoryCacheCheck</span><span class="params">(Object target, String key)</span> </span>&#123;</div><div class="line">  <span class="comment">//通过键key作为索引来从缓存中查找Bitmap对象，如果没有则返回null</span></div><div class="line">    Bitmap cached = cache.get(key);</div><div class="line">  </div><div class="line">    cancelExistingRequest(target, key);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</div><div class="line">      stats.cacheHit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cached;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这里关心的主要是<strong><em>cache.get()</em></strong>的调用，这里的<strong><em>cache</em></strong>是一个<strong><em>Cache</em></strong>对象，<strong><em>Cache</em></strong>是一个被设计来专门用于缓存的接口，不是很复杂，在看看<strong><em>cache</em></strong>的具体类型之前，先来看看这个接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</div><div class="line">  <span class="comment">//根据特定的键来从缓存中获取图片资源，如果缓存中没有则返回null</span></div><div class="line">  <span class="function">Bitmap <span class="title">get</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//将一个String对象和一个Bitmap对象以键值对的形式存入缓存中</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Bitmap bitmap)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//返回当前缓存中的内容大小</span></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//返回缓存所能存放的最大数据量</span></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">maxSize</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//一个空缓存对象，表示没有存储任何内容</span></div><div class="line">  Cache NONE = <span class="keyword">new</span> Cache() &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class="line">      <span class="comment">// Ignore.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSize</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于每一个方法这里都注释了，也极易明白。再回过头来看看<strong><em>cache</em></strong>的创建过程来看看它的具体类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">memoryCache = <span class="keyword">new</span> LruCache(context);</div><div class="line"></div><div class="line"><span class="keyword">new</span> Picasso(context, loader, service, memoryCache, stats);</div></pre></td></tr></table></figure>
<p>这里的<strong><em>memoryCache</em></strong>的类型便是<strong><em>Cache</em></strong>类型，而这个创建的代码就在是在<strong><em>Picasso.Builder</em></strong>的构造函数中，最后被传入<strong><em>Picasso</em></strong>的构造函数，赋值给<strong><em>cache</em></strong>。从这里可以看出来它的具体类型是<strong><em>LruCache</em></strong>。从名字中不难猜出，它实际上是通过使用<strong><em>LRU</em></strong>算法实现的缓存存取过程的。这里的<strong><em>LruCache</em></strong>并不是我们熟知的<strong><em>Android</em></strong>中<strong><em>support-v4</em></strong>包中的类<strong><em>LruCache</em></strong>，但其实现原理都是一摸一样的，都是采用<strong><em>LRU</em></strong>算法将所需缓存的数据存进一个<strong><em>LinkedHashMap</em></strong>中。</p>
<p>上面所提到的便是<strong><em>Picasso</em></strong>的内存缓存机制，那么它的磁盘缓存是通过什么方法实现的呢。其实<strong><em>Picasso</em></strong>的磁盘缓存是通过<strong><em>OkHttp</em></strong>的缓存功能来实现的。这里我们回到<strong><em>Loader</em></strong>类中的<strong><em>createDefaultLoader</em></strong>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> Loader <span class="title">createDefaultLoader</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Class.forName(<span class="string">"com.squareup.okhttp.OkHttpClient"</span>);</div><div class="line">      <span class="keyword">return</span> OkHttpLoaderCreator.create(context);</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> UrlConnectionLoader(context);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这个方法的执行过程便是在发现内存缓存中没有所想要的内容时开始通过网络发起请求的时候所发生的。这里先前介绍过实际请求调用的便是其中<strong><em>OkHttpLoader</em></strong>中的<strong><em>loader()</em></strong>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">load</span><span class="params">(String url, <span class="keyword">boolean</span> localCacheOnly)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    HttpURLConnection connection = client.open(<span class="keyword">new</span> URL(url));</div><div class="line">    connection.setUseCaches(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">if</span> (localCacheOnly) &#123;</div><div class="line">      connection.setRequestProperty(<span class="string">"Cache-Control"</span>, <span class="string">"only-if-cached"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> fromCache = parseResponseSourceHeader(connection.getHeaderField(RESPONSE_SOURCE));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(connection.getInputStream(), fromCache);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>从这里我们便可以一眼看出来，在发起请求的时候，所设置的属性便是对请求内容进行缓存，也就是说如果<strong><em>OkHttp</em></strong>的缓存中已经有了所需的图片资源，那就直接获取，如果没有则继续请求。</p>
<p>通过我们的分析算是证实了<strong><em>Picasso</em></strong>的磁盘缓存机制是通过<strong><em>OkHttp</em></strong>来实现的。但是，Square公司早已推了<strong><em>OkHttp3</em></strong>，但即使是checkout到最新版本的<strong><em>Picasso</em></strong>也并没有从中发现<strong><em>OkHttp3</em></strong>到影子，这就带来一个问题，实际使用<strong><em>Picasso</em></strong>到时候就会由于出现没有使用<strong><em>OkHttp</em></strong>的情况而出现无法使用磁盘缓存的问题。这里便向想要结局这个问题的同学推荐一个库<a href="https://github.com/JakeWharton/picasso2-okhttp3-downloader" target="_blank" rel="external">picasso2-okhttp3-downloader</a>，这时Jake大神为这个问题所专门写的，其中的实现机制其实很简单，和<strong><em>Picasso</em></strong>内的<strong><em>OkHttpLoader</em></strong>如出一辙，一看便知。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这部分的不长，主要就是我自己查看<strong><em>Picasso</em></strong>缓存机制的一个简单的流程记录，内容也很简单，同时又不可或缺所以就单独拿出来了，还是恨通俗易懂的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Picasso源码学习（一）]]></title>
      <url>http://yoursite.com/2016/10/18/Picasso%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<img src="/2016/10/18/Picasso源码学习（一）/picasso_cover.png" alt="picasso_cover.png" title="">
<p>从这里开始我会开始阅读一款来自于Square的大名鼎鼎的图片处理库<strong><em>Picasso</em></strong>，将这个过程以博客的形式记录下来，一方面是一种学习记录，另一方面也是一种督促啦。</p>
<!--excerpt-->
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>一切的第一步当然是首先把源码从github上clone下来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/square/picasso.git</div></pre></td></tr></table></figure>
<p>稍等片刻，<strong><em>Picasso</em></strong>的源码就被clone到了自己的电脑上。</p>
<p>当然，现在我们这里的就是<strong><em>Picasso</em></strong>的作者所commit的最新的代码，但是所要看的并不是这个内容，这里需要选择一个release版本。</p>
<img src="/2016/10/18/Picasso源码学习（一）/picasso0.png" alt="picasso0.png" title="">
<p>之所以选的是最早的1.0.0版本，是因为作为最早的版本，后面的所有版本都是基于这个版本进行编写的，阅读最早的版本可以更好地了解整个项目的构架。另外，作为最早的版本，这个版本肯定也是所有版本里最容易阅读的。我们接着将项目checkout到该版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout dea2e24</div></pre></td></tr></table></figure>
<p>接下来就是酥爽的源码阅读之旅了。</p>
<h1 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h1><h3 id="大致了解"><a href="#大致了解" class="headerlink" title="大致了解"></a>大致了解</h3><p>根据<strong><em>Picasso</em></strong>的使用方法，首先我们会使用 <code>Picasso.with(context)</code>，因此我们就从这里开始看看在我们使用<strong><em>Picasso</em></strong>的时候它都做了些什么。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Picasso <span class="title">with</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">//构造Picasso对象</span></div><div class="line">      singleton = <span class="keyword">new</span> Builder(context).build();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> singleton;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这是一个<strong><em>Picasso</em></strong>中的静态方法，很明显是构造了一个<strong><em>Picasso</em></strong>的单例，并且在代码构架中使用了Build模式建立了这个对象。这里的关键是<strong><em>Builder</em></strong>对象的构造过程里都做了什么。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Picasso <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">      Context context = <span class="keyword">this</span>.context;</div><div class="line">  	<span class="comment">//创建用于加载图片的对象loader</span></div><div class="line">      <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</div><div class="line">        loader = Utils.createDefaultLoader(context);</div><div class="line">      &#125;</div><div class="line">  	<span class="comment">//创建用于缓存的对象memoryCache</span></div><div class="line">      <span class="keyword">if</span> (memoryCache == <span class="keyword">null</span>) &#123;</div><div class="line">        memoryCache = <span class="keyword">new</span> LruCache(context);</div><div class="line">      &#125;</div><div class="line">  	<span class="comment">//创建用于请求的服务对象service</span></div><div class="line">      <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</div><div class="line">        service = Executors.newFixedThreadPool(<span class="number">3</span>, <span class="keyword">new</span> Utils.PicassoThreadFactory());</div><div class="line">      &#125;</div><div class="line">	<span class="comment">//缓存状态对象stats</span></div><div class="line">      Stats stats = <span class="keyword">new</span> Stats(memoryCache);</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Picasso(context, loader, service, memoryCache, stats);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从几个属性的名字里可以看出来，<strong><em>Picasso</em></strong>对象中有几个很重要的属性<strong><em>loader</em></strong>、<strong><em>memory</em></strong>、<strong><em>service</em></strong>和<strong><em>stats</em></strong>。其他先放一边，首先从这个<strong><em>loader</em></strong>对象入手，来分析整个加载流程。</p>
<h3 id="加载流程"><a href="#加载流程" class="headerlink" title="加载流程"></a>加载流程</h3><p>创建完了<strong><em>Picasso</em></strong>对象之后一般我们一定会调用的代码会是这样的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Picasso.with(context)</div><div class="line">  .load(url)</div><div class="line">  .into(imageview);</div></pre></td></tr></table></figure>
<p>我们可以推测到代码中的后两行做的事情就是将获取资源，然后将其加载进<strong><em>ImageView</em></strong>中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">load</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">	<span class="comment">//···省略代码···</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RequestBuilder(<span class="keyword">this</span>, path, Type.STREAM);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong><em>load()</em></strong>方法实际上所做的也就是创建一个<strong><em>RequestBuilder</em></strong>对象，并返回这个对象，<strong><em>into()</em></strong>方法也是这个类里的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">RequestBuilder(Picasso picasso, String path, Request.Type type) &#123;</div><div class="line">    <span class="keyword">this</span>.picasso = picasso;</div><div class="line">    <span class="keyword">this</span>.path = path;</div><div class="line">    <span class="keyword">this</span>.resourceId = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.type = type;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">into</span><span class="params">(ImageView target)</span> </span>&#123;</div><div class="line">  <span class="comment">//创建图片缓存索引key</span></div><div class="line">    String requestKey = createKey(path, resourceId, options, transformations);</div><div class="line">  <span class="comment">//根据key从缓存中查询Bitmap对象</span></div><div class="line">    Bitmap bitmap = picasso.quickMemoryCacheCheck(target, requestKey);</div><div class="line">    <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">  	<span class="comment">//如果存在已经存在于缓存中的Bitmap对象，则加载进ImageView中</span></div><div class="line">      PicassoDrawable.setBitmap(target, picasso.context, bitmap, MEMORY, noFade, picasso.debugging);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//设置占位图</span></div><div class="line">    <span class="keyword">if</span> (placeholderResId != <span class="number">0</span> || placeholderDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">      PicassoDrawable.setPlaceholder(target, picasso.context, placeholderResId, placeholderDrawable,</div><div class="line">          picasso.debugging);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//创建图片资源请求对象传入Picasso对象的submit方法中</span></div><div class="line">    Request request =</div><div class="line">        <span class="keyword">new</span> Request(picasso, path, resourceId, target, options, transformations, type, skipCache,</div><div class="line">            noFade, errorResId, errorDrawable);</div><div class="line">    picasso.submit(request);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这里贴出了<strong><em>RequestBuilder</em></strong>的构造方法和<strong><em>into()</em></strong>方法，如果缓存中有图片资源，则直接取出加载，如果没有则新建一个<strong><em>Request</em></strong>（实际上是一个<strong><em>Runnable</em></strong>）对象，并通过调用<strong><em>submit()</em></strong>方法来加载图片。接下来我么看看<strong><em>submit()</em></strong>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">submit</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">    Object target = request.getTarget();</div><div class="line">    <span class="keyword">if</span> (target == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    cancelExistingRequest(target, request.path);</div><div class="line">  <span class="comment">//将ImageView对象和Request对象以键值对的形式存入一个Map对象中</span></div><div class="line">    targetsToRequests.put(target, request);</div><div class="line">  <span class="comment">//调用Executor对象的submit()方法继续加载过程</span></div><div class="line">    request.future = service.submit(request);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这里我们发现又调用了一个实例<strong><em>service</em></strong>的<strong><em>submit()</em></strong>方法，这个<strong><em>service</em></strong>实际上是一个<strong><em>Executor</em></strong>对象，这个对象也就是我们上面创建<strong><em>Builder</em></strong>的过程中构造的。我们知道<strong><em>Executor</em></strong>是<strong><em>java.util.concurrent</em></strong>类库中的一个类，这里开启了一个线程池用来处理图片请求的线程，由此我们知道这里实际上调用的就是<strong><em>Request</em></strong>的<strong><em>run()</em></strong>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">//···省略代码···</span></div><div class="line"></div><div class="line">      picasso.run(<span class="keyword">this</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Throwable e) &#123;</div><div class="line">      <span class="comment">//···省略代码···</span></div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      <span class="comment">//···省略代码···</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>点进去之后，我们发现这里又接着调用了<strong><em>Picasso</em></strong>的<strong><em>run()</em></strong>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Bitmap result = resolveRequest(request);</div><div class="line"></div><div class="line">      request.result = result;</div><div class="line">      handler.sendMessage(handler.obtainMessage(REQUEST_COMPLETE, request));</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>到了这里我们终于发现实际上请求<strong><em>Bitmap</em></strong>资源的方法是<strong><em>resolveRequest()</em></strong>方法，并且在成功获取到了资源之后发送了一个请求成功的<strong><em>Message</em></strong>，请求成功后的部分稍后再看，这里先看看<strong><em>resolveRequest()</em></strong>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function">Bitmap <span class="title">resolveRequest</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  <span class="comment">//检查缓存中是否存有Bitmap资源对象</span></div><div class="line">    Bitmap bitmap = loadFromCache(request);</div><div class="line">    <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">      stats.cacheMiss();</div><div class="line">      <span class="comment">//如果没有则继续请求</span></div><div class="line">      bitmap = loadFromType(request);</div><div class="line">      </div><div class="line">      <span class="comment">//将请求到的资源存入缓存中</span></div><div class="line">      <span class="keyword">if</span> (bitmap != <span class="keyword">null</span> &amp;&amp; !request.skipCache) &#123;</div><div class="line">        cache.set(request.key, bitmap);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      stats.cacheHit();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bitmap;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>接着<strong><em>Bitmap</em></strong>方法还要经过<strong><em>loadFromType()</em></strong>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Bitmap <span class="title">loadFromType</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    PicassoBitmapOptions options = request.options;</div><div class="line">    Bitmap result = <span class="keyword">null</span>;</div><div class="line">  </div><div class="line">  <span class="comment">//根据资源类型的不同采取不同的请求方法</span></div><div class="line">    <span class="keyword">switch</span> (request.type) &#123;</div><div class="line">      <span class="keyword">case</span> CONTENT:</div><div class="line">        Uri path = Uri.parse(request.path);</div><div class="line">        result = decodeContentStream(path, options);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> RESOURCE:</div><div class="line">        Resources resources = context.getResources();</div><div class="line">        result = decodeResource(resources, request.resourceId, options);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> FILE:</div><div class="line">        result = decodeFile(request.path, options);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> STREAM:</div><div class="line">        Response response = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          response = loader.load(request.path, request.retryCount == <span class="number">0</span>);</div><div class="line">          </div><div class="line">          result = decodeStream(response.stream, options);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          response.stream.close();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Unknown request type: "</span> + request.type);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这个方法的内容稍多，我也删去了部分，这里实际上是根据请求的资源类型的不同分别采取不同的方法去请求Bitmap资源，其中前三种不复杂，重头戏是最后一种——网络请求资源，也可以说是使用最为频繁的请求姿势。而这里的请求过程用到了我们在最开始所提到的<strong><em>Loader</em></strong>并调用了其中的<strong><em>loader()</em></strong>方法。<strong><em>Loader</em></strong>实际上是一个接口，<strong><em>loader</em></strong>的实际类型是由<strong><em>Builder</em></strong>创建的<code>loader = Utils.createDefaultLoader(context);</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> Loader <span class="title">createDefaultLoader</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Class.forName(<span class="string">"com.squareup.okhttp.OkHttpClient"</span>);</div><div class="line">      <span class="keyword">return</span> OkHttpLoaderCreator.create(context);</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> UrlConnectionLoader(context);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>从名字上可以看出这里使用了另一个Square大名鼎鼎的开源库<strong><em>OkHttp</em></strong>来处理网络请求。而这里的<strong><em>create()</em></strong>方法则创建了一个<strong><em>OkHttpLoader</em></strong>对象，我们来看看它的<strong><em>loader()</em></strong>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">load</span><span class="params">(String url, <span class="keyword">boolean</span> localCacheOnly)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    HttpURLConnection connection = client.open(<span class="keyword">new</span> URL(url));</div><div class="line">    connection.setUseCaches(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">if</span> (localCacheOnly) &#123;</div><div class="line">      connection.setRequestProperty(<span class="string">"Cache-Control"</span>, <span class="string">"only-if-cached"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> fromCache = parseResponseSourceHeader(connection.getHeaderField(RESPONSE_SOURCE));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(connection.getInputStream(), fromCache);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>到这里总算是完成了全部的资源请求流程。这里回到上面提到过的请求成功之后会发送一个请求成功的消息。然后我们看看对于这个消息是在哪里接受并且如何处理的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler(Looper.getMainLooper()) &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">      Request request = (Request) msg.obj;</div><div class="line">      <span class="keyword">if</span> (request.future.isCancelled() || request.retryCancelled) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Picasso picasso = request.picasso;</div><div class="line">      <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">        <span class="keyword">case</span> REQUEST_COMPLETE:</div><div class="line">          picasso.targetsToRequests.remove(request.getTarget());</div><div class="line">          request.complete();</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> REQUEST_RETRY:</div><div class="line">          picasso.retry(request);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> REQUEST_DECODE_FAILED:</div><div class="line">          picasso.targetsToRequests.remove(request.getTarget());</div><div class="line">          request.error();</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Unknown handler message received: "</span> + msg.what);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>原来在<strong><em>Picasso</em></strong>类中，一开始就创建了一个<strong><em>Handler</em></strong>来处理各种请求状态，这个<strong><em>Handler</em></strong>被创建在主线程。在这里，对于请求成功的情况，调用了<strong><em>Request</em></strong>类的<strong><em>complete()</em></strong>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">complete</span><span class="params">()</span> </span>&#123;</div><div class="line">    ImageView target = <span class="keyword">this</span>.target.get();</div><div class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</div><div class="line">      Context context = picasso.context;</div><div class="line">      <span class="keyword">boolean</span> debugging = picasso.debugging;</div><div class="line">      PicassoDrawable.setBitmap(target, context, result, loadedFrom, noFade, debugging);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这里涉及到了一个工具类<strong><em>PicassoDrawable</em></strong>，调用其中的<strong><em>setBitmap</em></strong>方法来加载图片。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setBitmap</span><span class="params">(ImageView target, Context context, Bitmap bitmap, LoadedFrom loadedFrom,</span></span></div><div class="line">      <span class="keyword">boolean</span> noFade, <span class="keyword">boolean</span> debugging) &#123;</div><div class="line">    PicassoDrawable picassoDrawable = extractPicassoDrawable(target);</div><div class="line">    <span class="keyword">if</span> (picassoDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">      picassoDrawable.setBitmap(bitmap, loadedFrom, noFade);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      target.setImageDrawable(<span class="keyword">new</span> PicassoDrawable(context, bitmap, loadedFrom, noFade, debugging));</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>到这里算是彻底地完成了整个请求加载到流程。后面我还会去分析这个库的其他部分，所以说。。。。。。我就先去歇一会啦！！！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个新的开始]]></title>
      <url>http://yoursite.com/2016/09/28/%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>从开始学习Android到现在不知不觉有一年出头了，作为学生也总算是到了大三了。但是，一名coder现在才想起来开个自己的博客好像也是稍微有点迟啊（滑稽脸）。虽然不知道未来在这博客里能写多少有意思的东西，但是既然已经开了，那就把它作为一个标志，象征一个新的学习阶段的开始吧。</p>
<!--excerpt-->
<h2 id="好像并没有学多少东西啊"><a href="#好像并没有学多少东西啊" class="headerlink" title="好像并没有学多少东西啊"></a>好像并没有学多少东西啊</h2><p>我自己是做Android的，不过现在想想貌似会的也就是Android上的东西。从大一开始接触Java，那么吊儿郎当地学了那么久，不敢说自己会多少东西，但至少装装样子还是可以的。</p>
<p>其实说到底我所学的东西也就是“Java——Android”这样简单的两点一线，再往细的说其实也就仅限于Android应用的开发。虽然曾经也看了一些Android的源码，想要深入地去学学，但是现在仔细想想，真的是一点都记不起来了（这应该也是开博客的原因吧）。</p>
<p>想到这里不禁感慨要学的东西还有好多，再加上明年就要不得不去面对实习的压力了，觉得貌似将会度过大学期间最为充（麻）实（烦）的一年了。所以就像上面写的一样，从这篇博客开始也得稍微振作一下，把我这个懒家伙所有能拿出来的精力给好好释放一下了。</p>
<h2 id="一些小小的计划"><a href="#一些小小的计划" class="headerlink" title="一些小小的计划"></a>一些小小的计划</h2><p>现在正在写一个<a href="https://github.com/zpauly/GitHub_Android" target="_blank" rel="external">Github的客户端</a>，这应该是我第一个完整的正式的项目了，所以我首先的期望就是能够把这个项目完完整整的坚持下来，虽然一个人写还是挺累的，但是想到写完之后的效果，另外说不定还能上线，还有点小激动呢。</p>
<p>写项目刚开始的时候还是感觉自己挺得心应手，但是随着代码量逐渐多了起来，程序的模块逐渐复杂了起来，重构以前写的模块已经成了家常便饭，想想真心觉得自己对工程项目的处理水平还真是有限。为了对自己的这方面有所提高，首当其冲的就是设计模式的学习了。虽然设计模式以前也有所学习，但是似乎也仅限于理论水平，于是这次决定把这东西再重新拾起来，并把它运用起来。除了重学设计模式这个想法外，看看别人写的项目也是必不可少的，github上的大神那么多，取取经自然是理所当然的啦。</p>
<p>另外就是决定好好拆一拆轮子。上面也提到我其实对Android的学习也仅仅一直都是应用层这一面，况且自我感觉学的还不深，所以拆一拆自然也就很有必要了。对于拆轮子这种事，肯定还是得挑那些超级有名的轮子来拆比较好。我的想法是首先从Picasso这个图片加载库开始，然后就是OkHttp、EventBus、RxJava……（真是又多又难啊，不知道我什么时候才能看完）还有一个方面就是Android源码的学习。对于这个，市面上这么多不错的书，配合着去看源码，本人还是有些自信的。</p>
<p>最后，我还有的一个想法就是能够多点一些技能树，毕竟只会这么一个方面的内容终归还是不够的。第一个想点点技能树就是C++了。虽然100个不愿意，但是学到现在再也绕不过C++终归是个不争点事实，不管是要学NDK开发还是以后其他的内容C++就在眼前，只能面对面硬杠了。另外就是自己也有那么一点想学Python的意思，这个倒不是什么必须的，就是觉得挺有意思，就当本职外的兴趣在休闲的时候学学吧。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>往上一看，虽然写的短，但是要干的事情真是多啊，不多说了，要去学习了。。。。。。</p>
]]></content>
    </entry>
    
  
  
</search>
